{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>pg_graphql</code>","text":"<p>Documentation: https://supabase.github.io/pg_graphql</p> <p>Source Code: https://github.com/supabase/pg_graphql</p> <p><code>pg_graphql</code> adds GraphQL support to your PostgreSQL database.</p> <ul> <li> Performant</li> <li> Consistent</li> <li> Open Source</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p><code>pg_graphql</code> is a PostgreSQL extension that enables querying the database with GraphQL using a single SQL function.</p> <p>The extension reflects a GraphQL schema from the existing SQL schema and exposes it through a SQL function, <code>graphql.resolve(...)</code>. This enables any programming language that can connect to PostgreSQL to query the database via GraphQL with no additional servers, processes, or libraries.</p>"},{"location":"#tldr","title":"TL;DR","text":"<p>The SQL schema</p> <p><pre><code>create table account(\nid serial primary key,\nemail varchar(255) not null,\ncreated_at timestamp not null,\nupdated_at timestamp not null\n);\n\ncreate table blog(\nid serial primary key,\nowner_id integer not null references account(id),\nname varchar(255) not null,\ndescription varchar(255),\ncreated_at timestamp not null,\nupdated_at timestamp not null\n);\n\ncreate type blog_post_status as enum ('PENDING', 'RELEASED');\n\ncreate table blog_post(\nid uuid not null default uuid_generate_v4() primary key,\nblog_id integer not null references blog(id),\ntitle varchar(255) not null,\nbody varchar(10000),\nstatus blog_post_status not null,\ncreated_at timestamp not null,\nupdated_at timestamp not null\n);\n</code></pre> Translates into a GraphQL schema displayed below.</p> <p>Each table receives an entrypoint in the top level <code>Query</code> type that is a pageable collection with relationships defined by its foreign keys. Tables similarly receive entrypoints in the <code>Mutation</code> type that enable bulk operations for insert, update, and delete.</p> <p></p>"},{"location":"api/","title":"API","text":"<p>In our API, each SQL table is reflected as a set of GraphQL types. At a high level, tables become types and columns/foreign keys become fields on those types.</p> <p>By default, PostgreSQL table and column names are not inflected when reflecting GraphQL  names. For example, an <code>account_holder</code> table has GraphQL type name <code>account_holder</code>. In cases where SQL entities are named using <code>snake_case</code>, enable inflection to match GraphQL/Javascript conventions e.g. <code>account_holder</code> -&gt; <code>AccountHolder</code>.</p> <p>Individual table, column, and relationship names may also be manually overridden.</p>"},{"location":"api/#primary-keys-required","title":"Primary Keys (Required)","text":"<p>Every table must have a primary key for it to be exposed in the GraphQL schema. For example, the following <code>Blog</code> table will be available in the GraphQL schema as <code>blogCollection</code> since it has a primary key named <code>id</code>:</p> <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null,\n);\n</code></pre> <p>But the following table will not be exposed because it doesn't have a primary key:</p> <pre><code>create table \"Blog\"(\nid int,\nname varchar(255) not null,\n);\n</code></pre>"},{"location":"api/#querytype","title":"QueryType","text":"<p>The <code>Query</code> type is the entrypoint for all read access into the graph.</p>"},{"location":"api/#node","title":"Node","text":"<p>The <code>node</code> interface allows for retrieving records that are uniquely identifiable by a globally unique <code>nodeId: ID!</code> field. For more information about nodeId, see nodeId.</p> <p>SQL Setup <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null,\ndescription varchar(255),\n\"createdAt\" timestamp not null,\n\"updatedAt\" timestamp not null\n);\n</code></pre></p> <p>GraphQL Types</p> QueryType <pre><code>\"\"\"The root type for querying data\"\"\"\ntype Query {\n\n\"\"\"Retrieve a record by its `ID`\"\"\"\nnode(nodeId: ID!): Node\n\n}\n</code></pre> <p>To query the <code>node</code> interface effectively, use inline fragments to specify which fields to return for each type.</p> <p>Example</p> QueryResponse <pre><code>{\nnode(\nnodeId: \"WyJwdWJsaWMiLCAiYmxvZyIsIDFd\"\n) {\nnodeId\n# Inline fragment for `Blog` type\n... on Blog {\nname\ndescription\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"node\": {\n\"name\": \"Some Blog\",\n\"nodeId\": \"WyJwdWJsaWMiLCAiYmxvZyIsIDFd\",\n\"description\": \"Description of Some Blog\"\n}\n}\n}\n</code></pre>"},{"location":"api/#collections","title":"Collections","text":"<p>Each table has top level entry in the <code>Query</code> type for selecting records from that table. Collections return a connection type and can be paginated, filtered, and sorted using the available arguments.</p> <p>SQL Setup</p> <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null,\ndescription varchar(255),\n\"createdAt\" timestamp not null,\n\"updatedAt\" timestamp not null\n);\n</code></pre> <p>GraphQL Types</p> QueryType <pre><code>\"\"\"The root type for querying data\"\"\"\ntype Query {\n\n\"\"\"A pagable collection of type `Blog`\"\"\"\nblogCollection(\n\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"\nSkip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.\n\"\"\"\noffset: Int\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: BlogFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [BlogOrderBy!]\n): BlogConnection\n}\n</code></pre> <p>Connection types are the primary interface to returning records from a collection.</p> <p>Connections wrap a result set with some additional metadata.</p> BlogConnectionBlogEdgePageInfoBlogBlogOrderByBlogFilter <pre><code>type BlogConnection {\n\n# Count of all records matching the *filter* criteria\ntotalCount: Int!\n\n# Pagination metadata\npageInfo: PageInfo!\n\n# Result set\nedges: [BlogEdge!]!\n\n}\n</code></pre> <pre><code>type BlogEdge {\n\n# Unique identifier of the record within the query\ncursor: String!\n\n# Contents of a record/row in the results set\nnode: Blog\n\n}\n</code></pre> <pre><code>type PageInfo {\n\n# unique identifier of the first record within the query\nstartCursor: String\n\n# unique identifier of the last record within the query\nendCursor: String\n\n# is another page of content available\nhasNextPage: Boolean!\n\n# is another page of content available\nhasPreviousPage: Boolean!\n}\n</code></pre> <pre><code># A record from the `blog` table\ntype Blog {\n\n# globally unique identifier\nnodeId: ID!\n\n# Value from `id` column\nid: Int!\n\n# Value from `name` column\nname: String!\n\n# Value from `description` column\ndescription: String\n\n# Value from `createdAt` column\ncreatedAt: Datetime!\n\n# Value from `updatedAt` column\nupdatedAt: Datetime!\n\n}\n</code></pre> <pre><code>input BlogOrderBy {\nid: OrderByDirection\nname: OrderByDirection\ndescription: OrderByDirection\ncreatedAt: OrderByDirection\nupdatedAt: OrderByDirection\n}\n</code></pre> <pre><code>input BlogFilter {\nnodeId: IDFilter\nid: IntFilter\nname: StringFilter\ndescription: StringFilter\ncreatedAt: DatetimeFilter\nupdatedAt: DatetimeFilter\nand: [BlogFilter!]\nor: [BlogFilter!]\nnot: BlogFilter\n}\n</code></pre> <p>Note</p> <p>The <code>totalCount</code> field is disabled by default because it can be expensive on large tables. To enable it use a comment directive</p>"},{"location":"api/#pagination","title":"Pagination","text":""},{"location":"api/#keyset-pagination","title":"Keyset Pagination","text":"<p>Paginating forwards and backwards through collections is handled using the <code>first</code>, <code>last</code>, <code>before</code>, and <code>after</code> parameters, following the relay spec.</p> QueryType <pre><code>type Query {\n\nblogCollection(\n\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n...truncated...\n\n): BlogConnection\n}\n</code></pre> <p>Metadata relating to the current page of a result set is available on the <code>pageInfo</code> field of the connection type returned from a collection.</p> PageInfoBlogConnection <pre><code>type PageInfo {\n\n# unique identifier of the first record within the query\nstartCursor: String\n\n# unique identifier of the last record within the query\nendCursor: String\n\n# is another page of content available\nhasNextPage: Boolean!\n\n# is another page of content available\nhasPreviousPage: Boolean!\n}\n</code></pre> <pre><code>type BlogConnection {\n\n# Pagination metadata\npageInfo: PageInfo!\n\n# Result set\nedges: [BlogEdge!]!\n\n}\n</code></pre> <p>To paginate forward in the collection, use the <code>first</code> and <code>after</code> arguments. To retrieve the first page, the <code>after</code> argument should be null or absent.</p> <p>Example</p> QueryPage 1 <pre><code>{\nblogCollection(\nfirst: 2,\nafter: null\n) {\npageInfo {\nstartCursor\nendCursor\nhasPreviousPage\nhasNextPage\n}\nedges {\ncursor\nnode {\nid\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 2\n},\n\"cursor\": \"WzJd\"\n}\n],\n\"pageInfo\": {\n\"startCursor\": \"WzFd\",\n\"endCursor\": \"WzJd\",\n\"hasNextPage\": true,\n\"hasPreviousPage\": false\n}\n}\n}\n}\n</code></pre> <p>To retrieve the next page, provide the cursor value from <code>data.blogCollection.pageInfo.endCursor</code> to the <code>after</code> argument of another query.</p> QueryPage 2 <pre><code>{\nblogCollection(\nfirst: 2,\nafter: \"WzJd\"\n) {\n...truncated...\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 3\n},\n\"cursor\": \"WzNd\"\n},\n{\n\"node\": {\n\"id\": 4\n},\n\"cursor\": \"WzRd\"\n}\n],\n\"pageInfo\": {\n\"startCursor\": \"WzNd\",\n\"endCursor\": \"WzRd\",\n\"hasNextPage\": false,\n\"hasPreviousPage\": true\n}\n}\n}\n}\n</code></pre> <p>once the collection has been fully enumerated, <code>data.blogConnection.pageInfo.hasNextPage</code> returns false.</p> <p>To paginate backwards through a collection, repeat the process substituting <code>first</code> -&gt; <code>last</code>, <code>after</code> -&gt; <code>before</code>, <code>hasNextPage</code> -&gt; <code>hasPreviousPage</code></p>"},{"location":"api/#offset-pagination","title":"Offset Pagination","text":"<p>In addition to keyset pagination, collections may also be paged using <code>first</code> and <code>offset</code>, which operates like SQL's <code>limit</code> and <code>offset</code> to skip <code>offset</code> number of records in the results.</p> <p>Note</p> <p><code>offset</code> based pagination becomes inefficient the <code>offset</code> value increases. For this reason, prefer cursor based pagination where possible.</p> QueryPage 2 <pre><code>{\nblogCollection(\nfirst: 2,\noffset: 2\n) {\n...truncated...\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 3\n},\n\"cursor\": \"WzNd\"\n},\n{\n\"node\": {\n\"id\": 4\n},\n\"cursor\": \"WzRd\"\n}\n],\n\"pageInfo\": {\n\"startCursor\": \"WzNd\",\n\"endCursor\": \"WzRd\",\n\"hasNextPage\": false,\n\"hasPreviousPage\": true\n}\n}\n}\n}\n</code></pre>"},{"location":"api/#filtering","title":"Filtering","text":"<p>To filter the result set, use the <code>filter</code> argument.</p> QueryType <pre><code>type Query {\n\nblogCollection(\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: BlogFilter\n\n...truncated...\n\n): BlogConnection\n}\n</code></pre> <p>Where the <code>&lt;Table&gt;Filter</code> type enumerates filterable fields and their associated <code>&lt;Type&gt;Filter</code>.</p> BlogFilterIntFilterStringFilterStringListFilterFilterIs <pre><code>input BlogFilter {\nnodeId: IDFilter\nid: IntFilter\nname: StringFilter\ndescription: StringFilter\ntags: StringListFilter\ncreatedAt: DatetimeFilter\nupdatedAt: DatetimeFilter\nand: [BlogFilter!]\nor: [BlogFilter!]\nnot: BlogFilter\n}\n</code></pre> <pre><code>\"\"\"\nBoolean expression comparing fields on type \"Int\"\n\"\"\"\ninput IntFilter {\neq: Int\ngt: Int\ngte: Int\nin: [Int!]\nlt: Int\nlte: Int\nneq: Int\nis: FilterIs\n}\n</code></pre> <pre><code>\"\"\"\nBoolean expression comparing fields on type \"String\"\n\"\"\"\ninput StringFilter {\neq: String\ngt: String\ngte: String\nin: [String!]\nlt: String\nlte: String\nneq: String\nis: FilterIs\nstartsWith: String\nlike: String\nilike: String\nregex: String\niregex: String\n}\n</code></pre> <pre><code>\"\"\"\nBoolean expression comparing fields on type \"StringList\"\n\"\"\"\ninput StringListFilter {\ncd: [String!]\ncs: [String!]\neq: [String!]\ngt: [String!]\ngte: [String!]\nlt: [String!]\nlte: [String!]\nneq: [String!]\nov: [String!]\n}\n</code></pre> <pre><code>enum FilterIs {\nNULL\nNOT_NULL\n}\n</code></pre> <p>The following list shows the operators that may be available on <code>&lt;Type&gt;Filter</code> types.</p> Operator Description eq Equal To neq Not Equal To gt Greater Than gte Greater Than Or Equal To in Contained by Value List lt Less Than lte Less Than Or Equal To is Null or Not Null startsWith Starts with prefix like Pattern Match. '%' as wildcard ilike Pattern Match. '%' as wildcard. Case Insensitive regex POSIX Regular Expression Match iregex POSIX Regular Expression Match. Case Insensitive cs Contains. Applies to array columns only. cd Contained in. Applies to array columns only. ov Overlap (have points in common). Applies to array columns only. <p>Not all operators are available on every <code>&lt;Type&gt;Filter</code> type. For example, <code>UUIDFilter</code> only supports <code>eq</code> and <code>neq</code> because <code>UUID</code>s are not ordered.</p> <p>Example: simple</p> QueryResult <pre><code>{\nblogCollection(\nfilter: {id: {lt: 3}},\n) {\nedges {\ncursor\nnode {\nid\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 2\n},\n\"cursor\": \"WzJd\"\n}\n]\n}\n}\n}\n</code></pre> <p>Example: array column</p> <p>The <code>cs</code> filter is used to return results where all the elements in the input array appear in the array column.</p> <code>cs</code> Filter Query<code>cs</code> Filter Result <pre><code>{\nblogCollection(\nfilter: {tags: {cs: [\"tech\", \"innovation\"]}},\n) {\nedges {\ncursor\nnode {\nid\nname\ntags\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"A: Blog 1\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"tech\", \"innovation\"]\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"tech\", \"innovation\", \"entrepreneurship\"]\n},\n\"cursor\": \"WzJd\"\n}\n]\n}\n}\n}\n</code></pre> <p>The <code>cs</code> filter can also accept a single scalar.</p> <code>cs</code> Filter with Scalar Query<code>cs</code> Filter with Scalar Result <pre><code>{\nblogCollection(\nfilter: {tags: {cs: \"tech\"}},\n) {\nedges {\ncursor\nnode {\nid\nname\ntags\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"A: Blog 1\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"tech\", \"innovation\"]\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"tech\", \"innovation\", \"entrepreneurship\"]\n},\n\"cursor\": \"WzJd\"\n}\n]\n}\n}\n}\n</code></pre> <p>The <code>cd</code> filter is used to return results where every element of the array column appears in the input array.</p> <code>cd</code> Filter Query<code>cd</code> Filter Result <pre><code>{\nblogCollection(\nfilter: {tags: {cd: [\"entrepreneurship\", \"innovation\", \"tech\"]}},\n) {\nedges {\ncursor\nnode {\nid\nname\ntags\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"A: Blog 1\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"tech\", \"innovation\"]\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 3,\n\"name\": \"A: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"innovation\", \"entrepreneurship\"]\n},\n\"cursor\": \"WzNd\"\n}\n]\n}\n}\n}\n</code></pre> <p>The <code>cd</code> filter can also accept a single scalar. In this case, only results where the only element in the array column is the input scalar are returned.</p> <code>cd</code> Filter with Scalar Query<code>cd</code> Filter with Scalar Result <pre><code>{\nblogCollection(\nfilter: {tags: {cd: \"travel\"}},\n) {\nedges {\ncursor\nnode {\nid\nname\ntags\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 4,\n\"name\": \"A: Blog 4\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"travel\"]\n},\n\"cursor\": \"WzPd\"\n}\n]\n}\n}\n}\n</code></pre> <p>The <code>ov</code> filter is used to return results where the array column and the input array have at least one element in common.</p> <code>ov</code> Filter Query<code>ov</code> Filter Result <pre><code>{\nblogCollection(\nfilter: {tags: {ov: [\"tech\", \"travel\"]}},\n) {\nedges {\ncursor\nnode {\nid\nname\ntags\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"A: Blog 1\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"tech\", \"innovation\"]\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"tech\", \"innovation\", \"entrepreneurship\"]\n},\n\"cursor\": \"WzJd\"\n},\n{\n\"node\": {\n\"id\": 4,\n\"name\": \"A: Blog 4\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"tags\": [\"travel\"]\n},\n\"cursor\": \"WzPd\"\n}\n]\n}\n}\n}\n</code></pre> <p>Example: and/or</p> <p>Multiple filters can be combined with <code>and</code>, <code>or</code> and <code>not</code> operators. The <code>and</code> and <code>or</code> operators accept a list of <code>&lt;Type&gt;Filter</code>.</p> <code>and</code> Filter Query<code>and</code> Filter Result<code>or</code> Filter Query<code>or</code> Filter Result <pre><code>{\nblogCollection(\nfilter: {\nand: [\n{id: {eq: 1}}\n{name: {eq: \"A: Blog 1\"}}\n]\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"A: Blog 1\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc1\"\n},\n\"cursor\": \"WzFd\"\n}\n]\n}\n}\n}\n</code></pre> <pre><code>{\nblogCollection(\nfilter: {\nor: [\n{id: {eq: 1}}\n{name: {eq: \"A: Blog 2\"}}\n]\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"A: Blog 1\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc1\"\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc2\"\n},\n\"cursor\": \"WzJd\"\n}\n]\n}\n}\n}\n</code></pre> <p>Example: not</p> <p><code>not</code> accepts a single <code>&lt;Type&gt;Filter</code>.</p> <code>not</code> Filter Query<code>not</code> Filter Result <pre><code>{\nblogCollection(\nfilter: {\nnot: {id: {eq: 1}}\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc2\"\n},\n\"cursor\": \"WzJd\"\n},\n{\n\"node\": {\n\"id\": 3,\n\"name\": \"A: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc3\"\n},\n\"cursor\": \"WzNd\"\n},\n{\n\"node\": {\n\"id\": 4,\n\"name\": \"B: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"b desc1\"\n},\n\"cursor\": \"WzRd\"\n}\n]\n}\n}\n}\n</code></pre> <p>Example: nested composition</p> <p>The <code>and</code>, <code>or</code> and <code>not</code> operators can be arbitrarily nested inside each other.</p> QueryResult <pre><code>{\nblogCollection(\nfilter: {\nor: [\n{ id: { eq: 1 } }\n{ id: { eq: 2 } }\n{ and: [{ id: { eq: 3 }, not: { name: { eq: \"A: Blog 2\" } } }] }\n]\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"A: Blog 1\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc1\"\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc2\"\n},\n\"cursor\": \"WzJd\"\n},\n{\n\"node\": {\n\"id\": 3,\n\"name\": \"A: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc3\"\n},\n\"cursor\": \"WzNd\"\n}\n]\n}\n}\n}\n</code></pre> <p>Example: empty</p> <p>Empty filters are ignored, i.e. they behave as if the operator was not specified at all.</p> QueryResult <pre><code>{\nblogCollection(\nfilter: {\nand: [], or: [], not: {}\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"A: Blog 1\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc1\"\n},\n\"cursor\": \"WzFd\"\n},\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc2\"\n},\n\"cursor\": \"WzJd\"\n},\n{\n\"node\": {\n\"id\": 3,\n\"name\": \"A: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc3\"\n},\n\"cursor\": \"WzNd\"\n},\n{\n\"node\": {\n\"id\": 4,\n\"name\": \"B: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"b desc1\"\n},\n\"cursor\": \"WzRd\"\n}\n]\n}\n}\n}\n</code></pre> <p>Example: implicit and</p> <p>Multiple column filters at the same level will be implicitly combined with boolean <code>and</code>. In the following example the <code>id: {eq: 1}</code> and <code>name: {eq: \"A: Blog 1\"}</code> will be <code>and</code>ed.</p> QueryResult <pre><code>{\nblogCollection(\nfilter: {\n# Equivalent to not: { and: [{id: {eq: 1}}, {name: {eq: \"A: Blog 1\"}}]}\nnot: {\nid: {eq: 1}\nname: {eq: \"A: Blog 1\"}\n}\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc2\"\n},\n\"cursor\": \"WzJd\"\n},\n{\n\"node\": {\n\"id\": 3,\n\"name\": \"A: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc3\"\n},\n\"cursor\": \"WzNd\"\n},\n{\n\"node\": {\n\"id\": 4,\n\"name\": \"B: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"b desc1\"\n},\n\"cursor\": \"WzRd\"\n}\n]\n}\n}\n}\n</code></pre> <p>This means that an <code>and</code> filter can be often be simplified. In the following example all queries are equivalent and produce the same result.</p> Original <code>and</code> QuerySimplified <code>and</code> QueryEven More Simplified QueryResult <pre><code>{\nblogCollection(\nfilter: {\nand: [\n{id: {gt: 0}}\n{id: {lt: 2}}\n{name: {eq: \"A: Blog 1\"}}\n]\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\nblogCollection(\nfilter: {\nid: {gt: 0}\nid: {lt: 2}\nname: {eq: \"A: Blog 1\"}\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\nblogCollection(\nfilter: {\nid: {gt: 0, lt: 2}\nname: {eq: \"A: Blog 1\"}\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 2,\n\"name\": \"A: Blog 2\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc2\"\n},\n\"cursor\": \"WzJd\"\n},\n{\n\"node\": {\n\"id\": 3,\n\"name\": \"A: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"a desc3\"\n},\n\"cursor\": \"WzNd\"\n},\n{\n\"node\": {\n\"id\": 4,\n\"name\": \"B: Blog 3\",\n\"createdAt\": \"2023-07-24T04:01:09.882781\",\n\"description\": \"b desc1\"\n},\n\"cursor\": \"WzRd\"\n}\n]\n}\n}\n}\n</code></pre> <p>Be aware that the above simplification only works for the <code>and</code> operator. If you try it with an <code>or</code> operator it will behave like an <code>and</code>.</p> QueryResult <pre><code>{\nblogCollection(\nfilter: {\n# This is really an `and` in `or`'s clothing\nor: {\nid: {eq: 1}\nname: {eq: \"A: Blog 2\"}\n}\n}\n) {\nedges {\ncursor\nnode {\nid\nname\ndescription\ncreatedAt\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": []\n}\n}\n}\n</code></pre> <p>This is because according to the rules of GraphQL list input coercion, if a value passed to an input of list type is not a list, then it is coerced to a list of a single item. So in the above example <code>or: {id: {eq: 1}, name: {eq: \"A: Blog 2}}</code> will be coerced into <code>or: [{id: {eq: 1}, name: {eq: \"A: Blog 2}}]</code> which is equivalent to <code>or: [and: [{id: {eq: 1}}, {name: {eq: \"A: Blog 2}}}]</code> due to implicit <code>and</code>ing.</p> <p>Note</p> <p>Avoid naming your columns <code>and</code>, <code>or</code> or <code>not</code>. If you do, the corresponding filter operator will not be available for use.</p> <p>The <code>and</code>, <code>or</code> and <code>not</code> operators also work with update and delete mutations.</p>"},{"location":"api/#ordering","title":"Ordering","text":"<p>The default order of results is defined by the underlying table's primary key column in ascending order. That default can be overridden by passing an array of <code>&lt;Table&gt;OrderBy</code> to the collection's <code>orderBy</code> argument.</p> QueryTypeBlogOrderByOrderByDirection <pre><code>type Query {\n\nblogCollection(\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [BlogOrderBy!]\n\n...truncated...\n\n): BlogConnection\n}\n</code></pre> <pre><code>input BlogOrderBy {\nid: OrderByDirection\nname: OrderByDirection\ndescription: OrderByDirection\ncreatedAt: OrderByDirection\nupdatedAt: OrderByDirection\n}\n</code></pre> <pre><code>\"\"\"Defines a per-field sorting order\"\"\"\nenum OrderByDirection {\n\"\"\"Ascending order, nulls first\"\"\"\nAscNullsFirst\n\n\"\"\"Ascending order, nulls last\"\"\"\nAscNullsLast\n\n\"\"\"Descending order, nulls first\"\"\"\nDescNullsFirst\n\n\"\"\"Descending order, nulls last\"\"\"\nDescNullsLast\n}\n</code></pre> <p>Example</p> QueryResult <pre><code>{\nblogCollection(\norderBy: [{id: DescNullsLast}]\n) {\nedges {\nnode {\nid\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 4\n}\n},\n{\n\"node\": {\n\"id\": 3\n}\n},\n{\n\"node\": {\n\"id\": 2\n}\n},\n{\n\"node\": {\n\"id\": 1\n}\n}\n]\n}\n}\n}\n</code></pre> <p>Note, only one key value pair may be provided to each element of the input array. For example, <code>[{name: AscNullsLast}, {id: AscNullFirst}]</code> is valid. Passing multiple key value pairs in a single element of the input array e.g. <code>[{name: AscNullsLast, id: AscNullFirst}]</code>, is invalid.</p>"},{"location":"api/#mutationtype","title":"MutationType","text":"<p>The <code>Mutation</code> type is the entrypoint for mutations/edits.</p> <p>Each table has top level entry in the <code>Mutation</code> type for inserting <code>insertInto&lt;Table&gt;Collection</code>, updating <code>update&lt;Table&gt;Collection</code> and deleting <code>deleteFrom&lt;Table&gt;Collection</code>.</p> <p>SQL Setup <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null,\ndescription varchar(255),\n\"createdAt\" timestamp not null default now(),\n\"updatedAt\" timestamp\n);\n</code></pre></p> MutationType <pre><code>\"\"\"The root type for creating and mutating data\"\"\"\ntype Mutation {\n\n\"\"\"Adds one or more `BlogInsertResponse` records to the collection\"\"\"\ninsertIntoBlogCollection(\n\n\"\"\"Records to add to the Blog collection\"\"\"\nobjects: [BlogInsertInput!]!\n\n): BlogInsertResponse\n\n\"\"\"Updates zero or more records in the collection\"\"\"\nupdateBlogCollection(\n\"\"\"\nFields that are set will be updated for all records matching the `filter`\n\"\"\"\nset: BlogUpdateInput!\n\n\"\"\"Restricts the mutation's impact to records matching the critera\"\"\"\nfilter: BlogFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n\n): BlogUpdateResponse!\n\n\"\"\"Deletes zero or more records from the collection\"\"\"\ndeleteFromBlogCollection(\n\"\"\"Restricts the mutation's impact to records matching the critera\"\"\"\nfilter: BlogFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n\n): BlogDeleteResponse!\n\n}\n</code></pre>"},{"location":"api/#insert","title":"Insert","text":"<p>To add records to a collection, use the <code>insertInto&lt;Table&gt;Collection</code> field on the <code>Mutation</code> type.</p> <p>SQL Setup <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null,\ndescription varchar(255),\n\"createdAt\" timestamp not null default now(),\n\"updatedAt\" timestamp\n);\n</code></pre></p> <p>GraphQL Types</p> MutationTypeBlogInsertInputBlogInsertResponse <pre><code>\"\"\"The root type for creating and mutating data\"\"\"\ntype Mutation {\n\n\"\"\"Adds one or more `BlogInsertResponse` records to the collection\"\"\"\ninsertIntoBlogCollection(\n\n\"\"\"Records to add to the Blog collection\"\"\"\nobjects: [BlogInsertInput!]!\n\n): BlogInsertResponse\n\n}\n</code></pre> <pre><code>input BlogInsertInput {\nname: String\ndescription: String\ncreatedAt: Datetime\nupdatedAt: Datetime\n}\n</code></pre> <pre><code>type BlogInsertResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Blog!]!\n}\n</code></pre> <p>Where elements in the <code>objects</code> array are inserted into the underlying table.</p> <p>Example</p> QueryResult <pre><code>mutation {\ninsertIntoBlogCollection(\nobjects: [\n{name: \"foo\"},\n{name: \"bar\"},\n]\n) {\naffectedCount\nrecords {\nid\nname\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"insertIntoBlogCollection\": {\n\"records\": [\n{\n\"id\": 1,\n\"name\": \"foo\"\n},\n{\n\"id\": 2,\n\"name\": \"bar\"\n}\n],\n\"affectedCount\": 2\n}\n}\n}\n</code></pre>"},{"location":"api/#update","title":"Update","text":"<p>To update records in a collection, use the <code>update&lt;Table&gt;Collection</code> field on the <code>Mutation</code> type.</p> <p>SQL Setup <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null,\ndescription varchar(255),\n\"createdAt\" timestamp not null default now(),\n\"updatedAt\" timestamp\n);\n</code></pre></p> <p>GraphQL Types</p> MutationTypeBlogUpdateInputBlogUpdateResponse <pre><code>\"\"\"The root type for creating and mutating data\"\"\"\ntype Mutation {\n\n\"\"\"Updates zero or more records in the collection\"\"\"\nupdateBlogCollection(\n\"\"\"\nFields that are set will be updated for all records matching the `filter`\n\"\"\"\nset: BlogUpdateInput!\n\n\"\"\"Restricts the mutation's impact to records matching the critera\"\"\"\nfilter: BlogFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n\n): BlogUpdateResponse!\n\n}\n</code></pre> <pre><code>input BlogUpdateInput {\nname: String\ndescription: String\ncreatedAt: Datetime\nupdatedAt: Datetime\n}\n</code></pre> <pre><code>type BlogUpdateResponse {\n\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Blog!]!\n\n}\n</code></pre> <p>Where the <code>set</code> argument is a key value pair describing the values to update, <code>filter</code> controls which records should be updated, and <code>atMost</code> restricts the maximum number of records that may be impacted. If the number of records impacted by the mutation exceeds the <code>atMost</code> parameter the operation will return an error.</p> <p>Example</p> QueryResult <pre><code>mutation {\nupdateBlogCollection(\nset: {name: \"baz\"}\nfilter: {id: {eq: 1}}\n) {\naffectedCount\nrecords {\nid\nname\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"updateBlogCollection\": {\n\"records\": [\n{\n\"id\": 1,\n\"name\": \"baz\"\n}\n],\n\"affectedCount\": 1\n}\n}\n}\n</code></pre>"},{"location":"api/#delete","title":"Delete","text":"<p>To remove records from a collection, use the <code>deleteFrom&lt;Table&gt;Collection</code> field on the <code>Mutation</code> type.</p> <p>SQL Setup <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null,\ndescription varchar(255),\n\"createdAt\" timestamp not null default now(),\n\"updatedAt\" timestamp\n);\n</code></pre></p> <p>GraphQL Types</p> MutationTypeBlogFilterBlogDeleteResponse <pre><code>\"\"\"The root type for creating and mutating data\"\"\"\ntype Mutation {\n\n\"\"\"Deletes zero or more records from the collection\"\"\"\ndeleteFromBlogCollection(\n\"\"\"Restricts the mutation's impact to records matching the critera\"\"\"\nfilter: BlogFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n\n): BlogDeleteResponse!\n\n}\n</code></pre> <pre><code>input BlogFilter {\nid: IntFilter\nname: StringFilter\ndescription: StringFilter\ncreatedAt: DatetimeFilter\nupdatedAt: DatetimeFilter\nand: [BlogFilter!]\nor: [BlogFilter!]\nnot: BlogFilter\n}\n</code></pre> <pre><code>type BlogDeleteResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Blog!]!\n}\n</code></pre> <p>Where <code>filter</code> controls which records should be deleted and <code>atMost</code> restricts the maximum number of records that may be deleted. If the number of records impacted by the mutation exceeds the <code>atMost</code> parameter the operation will return an error.</p> <p>Example</p> QueryResult <pre><code>mutation {\ndeleteFromBlogCollection(\nfilter: {id: {eq: 1}}\n) {\naffectedCount\nrecords {\nid\nname\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"deleteFromBlogCollection\": {\n\"records\": [\n{\n\"id\": 1,\n\"name\": \"baz\"\n}\n],\n\"affectedCount\": 1\n}\n}\n}\n</code></pre>"},{"location":"api/#concepts","title":"Concepts","text":""},{"location":"api/#nodeid","title":"nodeId","text":"<p>The base GraphQL type for every table with a primary key is automatically assigned a <code>nodeId: ID!</code> field. That value, can be passed to the node entrypoint of the <code>Query</code> type to retrieve its other fields. <code>nodeId</code> may also be used as a caching key.</p> <p>relay support</p> <p>By default relay expects the <code>ID</code> field for types to have the name <code>id</code>. pg_graphql uses <code>nodeId</code> by default to avoid conflicting with user defined <code>id</code> columns. You can configure relay to work with pg_graphql's <code>nodeId</code> field with relay's <code>nodeInterfaceIdField</code> option. More info available here.</p> <p>SQL Setup <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null\n);\n</code></pre></p> <p>GraphQL Types</p> Blog <pre><code>type Blog {\nnodeId: ID! # this field\nid: Int!\nname: String!\n}\n</code></pre>"},{"location":"api/#relationships","title":"Relationships","text":"<p>Relationships between collections in the Graph are derived from foreign keys.</p>"},{"location":"api/#one-to-many","title":"One-to-Many","text":"<p>A foreign key on table A referencing table B defines a one-to-many relationship from table A to table B.</p> <p>SQL Setup <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null\n);\n\ncreate table \"BlogPost\"(\nid serial primary key,\n\"blogId\" integer not null references \"Blog\"(id),\ntitle varchar(255) not null,\nbody varchar(10000)\n);\n</code></pre></p> <p>GraphQL Types</p> Blog <pre><code>type Blog {\n\n# globally unique identifier\nnodeId: ID!\n\nid: Int!\nname: String!\ndescription: String\n\nblogPostCollection(\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"\n    Skip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.\n    \"\"\"\noffset: Int\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: BlogPostFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [BlogPostOrderBy!]\n): BlogPostConnection\n\n}\n</code></pre> <p>Where <code>blogPostCollection</code> exposes the full <code>Query</code> interface to <code>BlogPost</code>s.</p> <p>Example</p> QueryResult <pre><code>{\nblogCollection {\nedges {\nnode {\nname\nblogPostCollection {\nedges {\nnode {\nid\ntitle\n}\n}\n}\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"name\": \"pg_graphql blog\",\n\"blogPostCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 2,\n\"title\": \"fIr3t p0sT\"\n}\n},\n{\n\"node\": {\n\"id\": 3,\n\"title\": \"graphql with postgres\"\n}\n}\n]\n}\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"api/#many-to-one","title":"Many-to-One","text":"<p>A foreign key on table A referencing table B defines a many-to-one relationship from table B to table A.</p> <p>SQL Setup <pre><code>create table \"Blog\"(\nid serial primary key,\nname varchar(255) not null\n);\n\ncreate table \"BlogPost\"(\nid serial primary key,\n\"blogId\" integer not null references \"Blog\"(id),\ntitle varchar(255) not null,\nbody varchar(10000)\n);\n</code></pre></p> <p>GraphQL Types</p> BlogPost <pre><code>type BlogPost {\nnodeId: ID!\nid: Int!\nblogId: Int!\ntitle: String!\nbody: String\n\nblog: Blog\n}\n</code></pre> <p>Where <code>blog</code> exposes the <code>Blog</code> record associated with the <code>BlogPost</code>.</p> QueryResult <pre><code>{\nblogPostCollection {\nedges {\nnode {\ntitle\nblog {\nname\n}\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"blogPostCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"blog\": {\n\"name\": \"pg_graphql blog\"\n},\n\"title\": \"fIr3t p0sT\"\n}\n},\n{\n\"node\": {\n\"blog\": {\n\"name\": \"pg_graphql blog\"\n},\n\"title\": \"graphql with postgres\"\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"api/#one-to-one","title":"One-to-One","text":"<p>A one-to-one relationship is defined by a foreign key on table A referencing table B where the columns making up the foreign key on table A are unique.</p> <p>SQL Setup <pre><code>create table \"EmailAddress\"(\nid serial primary key,\naddress text unique not null\n);\n\ncreate table \"Employee\"(\nid serial primary key,\nname text not null,\nemail_address_id int unique references \"EmailAddress\"(id)\n);\n</code></pre></p> <p>GraphQL Types</p> EmployeeEmailAddress <pre><code>type Employee {\nnodeId: ID!\nid: Int!\nname: String!\nemailAddressId: Int\nemailAddress: EmailAddress\n}\n</code></pre> <pre><code>type EmailAddress {\nnodeId: ID!\nid: Int!\naddress: String!\nemployee: Employee\n}\n</code></pre> <p>Example</p> QueryResult <pre><code>{\nemployeeCollection {\nedges {\nnode {\nname\nemailAddress {\naddress\nemployee {\nname\n}\n}\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"employeeCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"name\": \"Foo Barington\",\n\"emailAddress\": {\n\"address\": \"foo@bar.com\",\n\"employee\": {\n\"name\": \"Foo Barington\"\n}\n}\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"api/#custom-scalars","title":"Custom Scalars","text":"<p>Due to differences among the types supported by PostgreSQL, JSON, and GraphQL, <code>pg_graphql</code> adds several new Scalar types to handle PostgreSQL builtins that require special handling.</p>"},{"location":"api/#json","title":"JSON","text":"<p><code>pg_graphql</code> serializes <code>json</code> and <code>jsonb</code> data types as <code>String</code> under the custom scalar name <code>JSON</code>.</p> <pre><code>scalar JSON\n</code></pre> <p>Example</p> <p>Given the setup</p> SQLGraphQL <pre><code>create table \"User\"(\nid bigserial primary key,\nconfig jsonb\n);\n\ninsert into \"User\"(config)\nvalues (jsonb_build_object('palette', 'dark-mode'));\n</code></pre> <pre><code>type User {\nnodeId: ID!\nid: BigInt!\nconfig: JSON\n}\n</code></pre> <p>The query</p> <pre><code>{\nuserCollection {\nedges {\nnode {\nconfig\n}\n}\n}\n}\n</code></pre> <p>The returns the following data. Note that <code>config</code> is serialized as a string</p> <pre><code>{\n\"data\": {\n\"userCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"config\": \"{\\\"palette\\\": \\\"dark-mode\\\"}\"\n}\n}\n]\n}\n}\n}\n</code></pre> <p>Use serialized JSON strings when updating or inserting <code>JSON</code> fields via the GraphQL API.</p> <p>JSON does not currently support filtering.</p>"},{"location":"api/#bigint","title":"BigInt","text":"<p>PostgreSQL <code>bigint</code> and <code>bigserial</code> types are 64 bit integers. In contrast, JSON supports 32 bit integers.</p> <p>Since PostgreSQL <code>bigint</code> values may be outside the min/max range allowed by JSON, they are represented in the GraphQL schema as <code>BigInt</code>s and values are serialized as strings.</p> <pre><code>scalar BigInt\n\ninput BigIntFilter {\neq: BigInt\ngt: BigInt\ngte: BigInt\nin: [BigInt!]\nlt: BigInt\nlte: BigInt\nneq: BigInt\nis: FilterIs\n}\n</code></pre> <p>Example</p> <p>Given the setup</p> SQLGraphQL <pre><code>create table \"Person\"(\nid bigserial primary key,\nname text\n);\n\ninsert into \"Person\"(name)\nvalues ('J. Bazworth');\n</code></pre> <pre><code>type Person {\nnodeId: ID!\nid: BigInt!\nname: String\n}\n</code></pre> <p>The query</p> <pre><code>{\npersonCollection {\nedges {\nnode {\nid\nname\n}\n}\n}\n}\n</code></pre> <p>The returns the following data. Note that <code>id</code> is serialized as a string</p> <pre><code>{\n\"data\": {\n\"personCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": \"1\",\n\"name\": \"Foo Barington\",\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"api/#bigfloat","title":"BigFloat","text":"<p>PostgreSQL's <code>numeric</code> type supports arbitrary precision floating point values. JSON's <code>float</code> is limited to 64-bit precision.</p> <p>Since a PostgreSQL <code>numeric</code> may require more precision than can be handled by JSON, <code>numeric</code> types are represented in the GraphQL schema as <code>BigFloat</code> and values are serialized as strings.</p> <pre><code>scalar BigFloat\n\ninput BigFloatFilter {\neq: BigFloat\ngt: BigFloat\ngte: BigFloat\nin: [BigFloat!]\nlt: BigFloat\nlte: BigFloat\nneq: BigFloat\nis: FilterIs\n}\n</code></pre> <p>Example</p> <p>Given the SQL setup</p> <pre><code>create table \"GeneralLedger\"(\nid serial primary key,\namount numeric(10,2)\n);\n\ninsert into \"GeneralLedger\"(amount)\nvalues (22.15);\n</code></pre> <p>The query</p> <pre><code>{\ngeneralLedgerCollection {\nedges {\nnode {\nid\namount\n}\n}\n}\n}\n</code></pre> <p>The returns the following data. Note that <code>amount</code> is serialized as a string</p> <pre><code>{\n\"data\": {\n\"generalLedgerCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"amount\": \"22.15\",\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"api/#opaque","title":"Opaque","text":"<p>PostgreSQL's type system is extensible and not all types handle all operations e.g. filtering with <code>like</code>. To account for these, <code>pg_graphql</code> introduces a scalar <code>Opaque</code> type. The <code>Opaque</code> type uses PostgreSQL's <code>to_json</code> method to serialize values. That allows complex or unknown types to be included in the schema by delegating handling to the client.</p> <pre><code>scalar Opaque\n\ninput OpaqueFilter {\neq: Opaque\nis: FilterIs\n}\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Initial release</li> </ul>"},{"location":"changelog/#101","title":"1.0.1","text":"<ul> <li>feature: Add support for Postgres 15</li> </ul>"},{"location":"changelog/#102","title":"1.0.2","text":"<ul> <li>bugfix: Correct inconsistent treatment of null literals</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":"<ul> <li>feature: Add support for Views, Materialized Views, and Foreign Tables</li> <li>feature: Add support for filtering on <code>is null</code> and <code>is not null</code></li> <li>feature: User configurable page size</li> <li>bugfix: Remove requirement for <code>insert</code> permission on every column for inserts to succeed</li> <li>bugfix: <code>hasNextPage</code> and <code>hasPreviousPage</code> during reverse pagination were backwards</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":"<ul> <li>feature: <code>String</code> type filters support <code>ilike</code>, <code>like</code>, <code>startsWith</code></li> <li>feature: Support for <code>@skip</code> and <code>@include</code> directives</li> <li>feature: Custom descriptions via comment directive <code>@graphql({\"description\": ...})</code></li> <li>bugfix: Unknown types are represented in GraphQL schema as <code>Opaque</code> rather than <code>String</code></li> <li>bugfix: PostgreSQL type modifiers, e.g. char(n), no longer truncate excess text</li> <li>bugfix: Creating a new enum variant between existing variants no longer errors</li> </ul>"},{"location":"changelog/#121","title":"1.2.1","text":"<ul> <li>feature: <code>String</code> type filters support <code>regex</code>, <code>iregex</code></li> <li>feature: computed relationships via functions returning setof</li> <li>bugfix: function based computed columns with same name no longer error</li> </ul>"},{"location":"changelog/#122","title":"1.2.2","text":"<ul> <li>feature: reproducible builds</li> </ul>"},{"location":"changelog/#123","title":"1.2.3","text":"<ul> <li>bugfix: enums not on the roles <code>search_path</code> are excluded from introspection</li> <li>bugfix: remove duplicate Enum registration</li> <li>bugfix: foreign keys on non-null columns produce non-null GraphQL relationships</li> </ul>"},{"location":"changelog/#130","title":"1.3.0","text":"<ul> <li>feature: rename enum variants with comment directive <code>@graphql({\"mappings\": \"sql-value\": \"graphql_value\"\"})</code></li> <li>bugfix: query with more than 50 fields fails</li> <li>bugfix: @skip and @include directives missing from introspection schema</li> <li>feature: Support for <code>and</code>, <code>or</code> and <code>not</code> operators in filters</li> <li>bugfix: queries failed to run if the database was in read-only replica mode</li> </ul>"},{"location":"changelog/#140","title":"1.4.0","text":"<ul> <li>feature: citext type represented as a GraphQL String</li> <li>feature: Support for Postgres 16</li> <li>feature: Support for user defined functions</li> </ul>"},{"location":"changelog/#141","title":"1.4.1","text":"<ul> <li>feature: Support for user defined functions with default arguments</li> <li>bugfix: Trigger functions excluded from API</li> </ul>"},{"location":"changelog/#142","title":"1.4.2","text":"<ul> <li>bugfix: UDF call returned null if the row returned by the function had any null column</li> </ul>"},{"location":"changelog/#143","title":"1.4.3","text":"<ul> <li>bugfix: make non-default args non-null in UDFs</li> <li>bugfix: default value of a string type argument in a UDF was wrapped in single quotes</li> <li>feature: add support for array types in UDFs</li> <li>bugfix: fix crash when there are cycles in fragments</li> <li>bugfix: function returning an inaccessible table's type no longer breaks introspection</li> </ul>"},{"location":"changelog/#144","title":"1.4.4","text":"<ul> <li>bugfix: function returning a noncompliant view's type no longer breaks introspection</li> </ul>"},{"location":"changelog/#150","title":"1.5.0","text":"<ul> <li>feature: <code>first</code>/<code>offset</code> based pagination</li> <li>feature: improved descriptions for all internal error states</li> </ul>"},{"location":"changelog/#151","title":"1.5.1","text":"<ul> <li>bugfix: reimplemented field merging to resolve a performance issue on large queries</li> </ul>"},{"location":"changelog/#152","title":"1.5.2","text":"<ul> <li>bugfix: enabled schema based multi-tenancy via filtering SQL context on schema permissions</li> <li>bugfix: function arguments with a null default value were required instead of optional</li> </ul>"},{"location":"changelog/#153","title":"1.5.3","text":"<ul> <li>bugfix: computed field returning a composite type was always null</li> </ul>"},{"location":"changelog/#154","title":"1.5.4","text":"<ul> <li>bugfix: once a query panics, all subsequent queries return a lock poisoned error.</li> </ul>"},{"location":"changelog/#155","title":"1.5.5","text":"<ul> <li>feature: add support for filtering on array column types</li> </ul>"},{"location":"changelog/#master","title":"master","text":""},{"location":"computed_fields/","title":"Computed Fields","text":""},{"location":"computed_fields/#computed-values","title":"Computed Values","text":""},{"location":"computed_fields/#postgresql-builtin-preferred","title":"PostgreSQL Builtin (Preferred)","text":"<p>PostgreSQL has a builtin method for adding generated columns to tables. Generated columns are reflected identically to non-generated columns. This is the recommended approach to adding computed fields when your computation meets the restrictions. Namely:</p> <ul> <li>expression must be immutable</li> <li>expression may only reference the current row</li> </ul> <p>For example: <pre><code>begin;\ncomment on schema public is '@graphql({\"inflect_names\": true})';\ncreate table public.account(\nid serial primary key,\nfirst_name varchar(255) not null,\nlast_name varchar(255) not null,\n-- Computed Column\nfull_name text generated always as (first_name || ' ' ||  last_name) stored\n);\ninsert into public.account(first_name, last_name)\nvalues\n('Foo', 'Fooington');\nselect jsonb_pretty(\ngraphql.resolve($$\n{\naccountCollection {\nedges {\nnode {\nid\nfirstName\nlastName\nfullName\n}\n}\n}\n}\n$$)\n);\njsonb_pretty                     ------------------------------------------------------\n{                                                   +\n\"data\": {                                       +\n\"accountCollection\": {                      +\n\"edges\": [                              +\n{                                   +\n\"node\": {                       +\n\"id\": 1,                    +\n\"fullName\": \"Foo Fooington\",+\n\"lastName\": \"Fooington\",    +\n\"firstName\": \"Foo\"          +\n}                               +\n}                                   +\n]                                       +\n}                                           +\n}                                               +\n}\n(1 row)\n\nrollback;\n</code></pre></p>"},{"location":"computed_fields/#extending-types-with-functions","title":"Extending Types with Functions","text":"<p>For arbitrary computations that do not meet the requirements for generated columns, a table's reflected GraphQL type can be extended by creating a function that:</p> <ul> <li>accepts a single argument of the table's tuple type</li> </ul> <pre><code>begin;\ncomment on schema public is '@graphql({\"inflect_names\": true})';\ncreate table public.account(\nid serial primary key,\nfirst_name varchar(255) not null,\nlast_name varchar(255) not null,\nparent_id int references account(id)\n);\n-- Extend with function\ncreate function public._full_name(rec public.account)\nreturns text\nimmutable\nstrict\nlanguage sql\nas $$\nselect format('%s %s', rec.first_name, rec.last_name)\n$$;\ninsert into public.account(first_name, last_name, parent_id)\nvalues\n('Foo', 'Fooington', 1);\nselect jsonb_pretty(\ngraphql.resolve($$\n{\naccountCollection {\nedges {\nnode {\nid\nfirstName\nlastName\nfullName\nparent {\nfullName\n}\n}\n}\n}\n}\n$$)\n);\njsonb_pretty                       ---------------------------------------------------------\n{                                                      +\n\"data\": {                                          +\n\"accountCollection\": {                         +\n\"edges\": [                                 +\n{                                      +\n\"node\": {                          +\n\"id\": 1,                       +\n\"parent\": {                    +\n\"fullName\": \"Foo Fooington\"+\n},                             +\n\"fullName\": \"Foo Fooington\",   +\n\"lastName\": \"Fooington\",       +\n\"firstName\": \"Foo\"             +\n}                                  +\n}                                      +\n]                                          +\n}                                              +\n}                                                  +\n}\n(1 row)\n\nrollback;\n</code></pre> <p>If the function is written in SQL, its volatility can impact freshness of data returned in mutations:</p> <pre><code>begin;\n-- A computed field function written in SQL and marked stable might return stale results.\n-- Directly from the postgres docs(https://www.postgresql.org/docs/current/xfunc-volatility.html):\n--For functions written in SQL or in any of the standard procedural languages,\n--there is a second important property determined by the volatility category,\n--namely the visibility of any data changes that have been made by the SQL\n--command that is calling the function. A VOLATILE function will see such\n--changes, a STABLE or IMMUTABLE function will not. This behavior is\n--implemented using the snapshotting behavior of MVCC (see Chapter 13): STABLE\n--and IMMUTABLE functions use a snapshot established as of the start of the\n--calling query, whereas VOLATILE functions obtain a fresh snapshot at the\n--start of each query they execute.\n--The solution is to mark these functions as volatile\ncreate table parent\n(\nid uuid primary key default gen_random_uuid(),\ncount int2\n);\ncreate table child\n(\nid uuid primary key default gen_random_uuid(),\nparent_id uuid references parent not null,\ncount int2\n);\n-- note that the function is marked stable and in written in sql\ncreate or replace function _count(rec parent)\nreturns smallint\nstable\nlanguage sql\nas\n$$\nselect sum(count)\nfrom child\nwhere parent_id = rec.id\n$$;\ninsert into parent (id, count)\nvalues ('8bcf0ee4-95ed-445f-808f-17b8194727ca', 1);\ninsert into child (id, parent_id, count)\nvalues ('57738181-3d0f-45ad-96dd-3ba799b2d21d', '8bcf0ee4-95ed-445f-808f-17b8194727ca', 2),\n('cb5993ff-e693-49cd-9114-a6510707e628', '8bcf0ee4-95ed-445f-808f-17b8194727ca', 3);\nselect jsonb_pretty(\ngraphql.resolve($$\nquery ParentQuery {\nparentCollection {\nedges {\nnode {\nid\ncount\nchildCollection {\nedges {\nnode {\ncount\n}\n}\n}\n}\n}\n}\n}\n$$)\n);\njsonb_pretty                              -----------------------------------------------------------------------\n{                                                                    +\n\"data\": {                                                        +\n\"parentCollection\": {                                        +\n\"edges\": [                                               +\n{                                                    +\n\"node\": {                                        +\n\"id\": \"8bcf0ee4-95ed-445f-808f-17b8194727ca\",+\n\"count\": 5,                                  +\n\"childCollection\": {                         +\n\"edges\": [                               +\n{                                    +\n\"node\": {                        +\n\"count\": 2                   +\n}                                +\n},                                   +\n{                                    +\n\"node\": {                        +\n\"count\": 3                   +\n}                                +\n}                                    +\n]                                        +\n}                                            +\n}                                                +\n}                                                    +\n]                                                        +\n}                                                            +\n}                                                                +\n}\n(1 row)\n\n-- since _count is stable, the value returned in parent.count field will be stale\n-- i.e. parent.count is still 5 instead of (3 + 5) = 8\nselect jsonb_pretty(\ngraphql.resolve($$\nmutation ChildMutation {\nupdateChildCollection(\nfilter: { id: { eq: \"57738181-3d0f-45ad-96dd-3ba799b2d21d\" } }\nset: { count: 5 }\n) {\nrecords {\nid\ncount\nparent {\nid\ncount\n}\n}\n}\n}\n$$)\n);\njsonb_pretty                              -----------------------------------------------------------------------\n{                                                                    +\n\"data\": {                                                        +\n\"updateChildCollection\": {                                   +\n\"records\": [                                             +\n{                                                    +\n\"id\": \"57738181-3d0f-45ad-96dd-3ba799b2d21d\",    +\n\"count\": 5,                                      +\n\"parent\": {                                      +\n\"id\": \"8bcf0ee4-95ed-445f-808f-17b8194727ca\",+\n\"count\": 5                                   +\n}                                                +\n}                                                    +\n]                                                        +\n}                                                            +\n}                                                                +\n}\n(1 row)\n\n-- note that the function is marked volatile\ncreate or replace function _count(rec parent)\nreturns smallint\nvolatile\nlanguage sql\nas\n$$\nselect sum(count)\nfrom child\nwhere parent_id = rec.id\n$$;\n-- since _count is volatile, the value returned in parent.count field will be fresh\n-- i.e. parent.count is correctly at (3 + 7) 10\nselect jsonb_pretty(\ngraphql.resolve($$\nmutation ChildMutation {\nupdateChildCollection(\nfilter: { id: { eq: \"57738181-3d0f-45ad-96dd-3ba799b2d21d\" } }\nset: { count: 7 }\n) {\nrecords {\nid\ncount\nparent {\nid\ncount\n}\n}\n}\n}\n$$)\n);\njsonb_pretty                              -----------------------------------------------------------------------\n{                                                                    +\n\"data\": {                                                        +\n\"updateChildCollection\": {                                   +\n\"records\": [                                             +\n{                                                    +\n\"id\": \"57738181-3d0f-45ad-96dd-3ba799b2d21d\",    +\n\"count\": 7,                                      +\n\"parent\": {                                      +\n\"id\": \"8bcf0ee4-95ed-445f-808f-17b8194727ca\",+\n\"count\": 10                                  +\n}                                                +\n}                                                    +\n]                                                        +\n}                                                            +\n}                                                                +\n}\n(1 row)\n\nrollback;\n</code></pre>"},{"location":"computed_fields/#computed-relationships","title":"Computed Relationships","text":"<p>Computed relations can be helpful to express relationships:</p> <ul> <li>between entities that don't support foreign keys</li> <li>too complex to be expressed via a foreign key</li> </ul> <p>If the relationship is simple, but involves an entity that does not support foreign keys e.g. Foreign Data Wrappers / Views, defining a comment directive is the easiest solution. See the view doc for a complete example. Note that for entities that do not support a primary key, like views, you must define one using a comment directive to use them in a computed relationship.</p> <p>Alternatively, if the relationship is complex, or you need compatibility with PostgREST, you can define a relationship using set returning functions.</p>"},{"location":"computed_fields/#to-one","title":"To-One","text":"<p>To One relationships can be defined using a function that returns <code>setof &lt;entity&gt; rows 1</code></p> <p>For example <pre><code>create table \"Person\" (\nid int primary key,\nname text\n);\n\ncreate table \"Address\"(\nid int primary key,\n\"isPrimary\" bool not null default false,\n\"personId\" int references \"Person\"(id),\naddress text\n);\n\n-- Example computed relation\ncreate function \"primaryAddress\"(\"Person\")\nreturns setof \"Address\" rows 1\nlanguage sql\nas\n$$\nselect addr\nfrom \"Address\" addr\nwhere $1.id = addr.\"personId\"\nand addr.\"isPrimary\"\nlimit 1\n$$;\n\ninsert into \"Person\"(id, name)\nvalues (1, 'Foo Barington');\n\ninsert into \"Address\"(id, \"isPrimary\", \"personId\", address)\nvalues (4, true, 1, '1 Main St.');\n</code></pre></p> <p>results in the GraphQL type</p> Person <pre><code>type Person implements Node {\n\"\"\"Globally Unique Record Identifier\"\"\"\nnodeId: ID!\n...\nprimaryAddress: Address\n}\n</code></pre> <p>and can be queried like a natively enforced relationship</p> QueryResponse <pre><code>{\npersonCollection {\nedges {\nnode {\nid\nname\nprimaryAddress {\naddress\n}\n}\n}\n\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"personCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"Foo Barington\",\n\"primaryAddress\": {\n\"address\": \"1 Main St.\"\n}\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"computed_fields/#to-many","title":"To-Many","text":"<p>To-many relationships can be defined using a function that returns a <code>setof &lt;entity&gt;</code></p> <p>For example: <pre><code>create table \"Person\" (\nid int primary key,\nname text\n);\n\ncreate table \"Address\"(\nid int primary key,\naddress text\n);\n\ncreate table \"PersonAtAddress\"(\nid int primary key,\n\"personId\" int not null,\n\"addressId\" int not null\n);\n\n\n-- Computed relation to bypass \"PersonAtAddress\" table for cleaner API\ncreate function \"addresses\"(\"Person\")\nreturns setof \"Address\"\nlanguage sql\nas\n$$\nselect\naddr\nfrom\n\"PersonAtAddress\" pa\njoin \"Address\" addr\non pa.\"addressId\" = \"addr\".id\nwhere\npa.\"personId\" = $1.id\n$$;\n\ninsert into \"Person\"(id, name)\nvalues (1, 'Foo Barington');\n\ninsert into \"Address\"(id, address)\nvalues (4, '1 Main St.');\n\ninsert into \"PersonAtAddress\"(id, \"personId\", \"addressId\")\nvalues (2, 1, 4);\n</code></pre></p> <p>results in the GraphQL type</p> Person <pre><code>type Person implements Node {\n\"\"\"Globally Unique Record Identifier\"\"\"\nnodeId: ID!\n...\naddresses(\nfirst: Int\nlast: Int\nbefore: Cursor\nafter: Cursor\nfilter: AddressFilter\norderBy: [AddressOrderBy!]\n): AddressConnection\n}\n</code></pre> <p>and can be queried like a natively enforced relationship</p> QueryResponse <pre><code>{\npersonCollection {\nedges {\nnode {\nid\nname\naddresses {\nedges {\nnode {\nid\naddress\n}\n}\n}\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"personCollection\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"name\": \"Foo Barington\",\n\"addresses\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 4,\n\"address\": \"1 Main St.\"\n}\n}\n]\n}\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Extra configuration options can be set on SQL entities using comment directives.</p>"},{"location":"configuration/#comment-directives","title":"Comment Directives","text":"<p>Comment directives are snippets of configuration associated with SQL entities that alter how those entities behave.</p> <p>The format of a comment directive is</p> <pre><code>@graphql(&lt;JSON&gt;)\n</code></pre>"},{"location":"configuration/#inflection","title":"Inflection","text":"<p>Inflection describes how SQL entities' names are transformed into GraphQL type and field names. By default, inflection is disabled and SQL names are literally interpolated such that</p> <pre><code>create table \"BlogPost\"(\nid int primary key,\n...\n);\n</code></pre> <p>results in GraphQL type names like <pre><code>BlogPost\nBlogPostEdge\nBlogPostConnection\n...\n</code></pre></p> <p>Since snake case is a common casing structure for SQL types, <code>pg_graphql</code> support basic inflection from <code>snake_case</code> to <code>PascalCase</code> for type names, and <code>snake_case</code> to <code>camelCase</code> for field names to match Javascript conventions.</p> <p>The inflection directive can be applied at the schema level with:</p> <pre><code>comment on schema &lt;schema_name&gt; is e'@graphql({\"inflect_names\": true})';\n</code></pre> <p>for example <pre><code>comment on schema public is e'@graphql({\"inflect_names\": true})';\n\ncreate table blog_post(\nid int primary key,\n...\n);\n</code></pre></p> <p>similarly would generated the GraphQL type names <pre><code>BlogPost\nBlogPostEdge\nBlogPostConnection\n...\n</code></pre></p> <p>For more fine grained adjustments to reflected names, see renaming.</p>"},{"location":"configuration/#max-rows","title":"Max Rows","text":"<p>The default page size for collections is 30 entries. To adjust the number of entries on each page, set a <code>max_rows</code> directive on the relevant schema entity.</p> <p>For example, to increase the max rows per page for each table in the <code>public</code> schema: <pre><code>comment on schema public is e'@graphql({\"max_rows\": 100})';\n</code></pre></p>"},{"location":"configuration/#totalcount","title":"totalCount","text":"<p><code>totalCount</code> is an opt-in field that extends a table's Connection type. It provides a count of the rows that match the query's filters, and ignores pagination arguments.</p> <pre><code>type BlogPostConnection {\nedges: [BlogPostEdge!]!\npageInfo: PageInfo!\n\n\"\"\"The total number of records matching the `filter` criteria\"\"\"\ntotalCount: Int! # this field\n}\n</code></pre> <p>to enable <code>totalCount</code> for a table, use the directive</p> <p><pre><code>comment on table \"BlogPost\" is e'@graphql({\"totalCount\": {\"enabled\": true}})';\n</code></pre> for example <pre><code>create table \"BlogPost\"(\nid serial primary key,\nemail varchar(255) not null\n);\ncomment on table \"BlogPost\" is e'@graphql({\"totalCount\": {\"enabled\": true}})';\n</code></pre></p>"},{"location":"configuration/#renaming","title":"Renaming","text":""},{"location":"configuration/#tables-type","title":"Table's Type","text":"<p>Use the <code>\"name\"</code> JSON key to override a table's type name.</p> <pre><code>create table account(\nid serial primary key\n);\n\ncomment on table public.account is\ne'@graphql({\"name\": \"AccountHolder\"})';\n</code></pre> <p>results in: <pre><code>type AccountHolder { # previously: \"Account\"\nid: Int!\n}\n</code></pre></p>"},{"location":"configuration/#columns-field-name","title":"Column's Field Name","text":"<p>Use the <code>\"name\"</code> JSON key to override a column's field name.</p> <pre><code>create table public.\"Account\"(\nid serial primary key,\nemail text\n);\n\ncomment on column \"Account\".email is\ne'@graphql({\"name\": \"emailAddress\"})';\n</code></pre> <p>results in: <pre><code>type Account {\nnodeId: ID!\nid: Int!\nemailAddress: String! # previously \"email\"\n}\n</code></pre></p>"},{"location":"configuration/#computed-field","title":"Computed Field","text":"<p>Use the <code>\"name\"</code> JSON key to override a computed field's name.</p> <pre><code>create table \"Account\"(\nid serial primary key,\n\"firstName\" varchar(255) not null,\n\"lastName\" varchar(255) not null\n);\n\n-- Extend with function\ncreate function public.\"_fullName\"(rec public.\"Account\")\nreturns text\nimmutable\nstrict\nlanguage sql\nas $$\nselect format('%s %s', rec.\"firstName\", rec.\"lastName\")\n$$;\n\ncomment on function public._full_name is\ne'@graphql({\"name\": \"displayName\"})';\n</code></pre> <p>results in: <pre><code>type Account {\nnodeId: ID!\nid: Int!\nfirstName: String!\nlastName: String!\ndisplayName: String # previously \"fullName\"\n}\n</code></pre></p>"},{"location":"configuration/#relationships-field","title":"Relationship's Field","text":"<p>Use the <code>\"local_name\"</code> and <code>\"foreign_name\"</code> JSON keys to override a relationship's inbound and outbound field names.</p> <pre><code>create table \"Account\"(\nid serial primary key\n);\n\ncreate table \"Post\"(\nid serial primary key,\n\"accountId\" integer not null references \"Account\"(id),\ntitle text not null,\nbody text\n);\n\ncomment on constraint post_owner_id_fkey\non \"Post\"\nis E'@graphql({\"foreign_name\": \"author\", \"local_name\": \"posts\"})';\n</code></pre> <p>results in: <pre><code>type Post {\nnodeId: ID!\nid: Int!\naccountId: Int!\ntitle: String!\nbody: String!\nauthor: Account # was \"account\"\n}\n\ntype Account {\nid: Int!\nposts( # was \"postCollection\"\nafter: Cursor,\nbefore: Cursor,\nfilter: PostFilter,\nfirst: Int,\nlast: Int,\norderBy: [PostOrderBy!]\n): PostConnection\n}\n</code></pre></p>"},{"location":"configuration/#description","title":"Description","text":"<p>Tables, Columns, and Functions accept a <code>description</code> directive to populate user defined descriptions in the GraphQL schema.</p> <pre><code>create table \"Account\"(\nid serial primary key\n);\n\ncomment on table public.account\nis e'@graphql({\"description\": \"A User Account\"})';\n\ncomment on column public.account.id\nis e'@graphql({\"description\": \"The primary key identifier\"})';\n</code></pre> <pre><code>\"\"\"A User Account\"\"\"\ntype Account implements Node {\n\n\"\"\"The primary key identifier\"\"\"\nid: Int!\n}\n</code></pre>"},{"location":"configuration/#enum-variant","title":"Enum Variant","text":"<p>If a variant of a Postgres enum does not conform to GraphQL naming conventions, introspection returns an error:</p> <p>For example: <pre><code>create type \"Algorithm\" as enum ('aead-ietf');\n</code></pre></p> <p>causes the error:</p> <pre><code>{\n\"errors\": [\n{\n\"message\": \"Names must only contain [_a-zA-Z0-9] but \\\"aead-ietf\\\" does not.\",\n}\n]\n}\n</code></pre> <p>To resolve this problem, rename the invalid SQL enum variant to a GraphQL compatible name:</p> <pre><code>alter type \"Algorithm\" rename value 'aead-ietf' to 'AEAD_IETF';\n</code></pre> <p>or, add a comment directive to remap the enum variant in the GraphQL API</p> <pre><code>comment on type \"Algorithm\" is '@graphql({\"mappings\": {\"aead-ietf\": \"AEAD_IETF\"}})';\n</code></pre> <p>Which both result in the GraphQL enum: <pre><code>enum Algorithm {\nAEAD_IETF\n}\n</code></pre></p>"},{"location":"contributing/","title":"Contributing","text":"<p>pg_graphql is OSS. PR and issues are welcome.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Requirements:</p> <ul> <li>rust</li> <li>cargo</li> <li>pgrx</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Tests are located in <code>./test/sql</code> with expected output in <code>./test/expected</code></p> <p>To run tests locally, execute:</p> <pre><code>$ cargo pgrx install; ./bin/installcheck\n</code></pre>"},{"location":"contributing/#interactive-psql-development","title":"Interactive PSQL Development","text":"<p>To reduce the iteration cycle, you may want to launch a psql prompt with <code>pg_graphql</code> installed to experiment</p> <pre><code>cargo pgrx run pg14\n</code></pre> <p>Try out the commands below to spin up a database with the extension installed &amp; query a table using GraphQL. Experiment with aliasing field/table names and filtering on different columns.</p> <pre><code>graphqldb= create extension pg_graphql cascade;\nCREATE EXTENSION\n\ngraphqldb= create table book(id int primary key, title text);\nCREATE TABLE\n\ngraphqldb= insert into book(id, title) values (1, 'book 1');\nINSERT 0 1\n</code></pre> <p>Finally, execute some graphql queries against the table. <pre><code>graphqldb= select graphql.resolve($$\nquery {\nbookCollection {\nedges {\nnode {\nid\n}\n}\n}\n}\n$$);\n\nresolve\n----------------------------------------------------------------------\n{\"data\": {\"bookCollection\": {\"edges\": [{\"node\": {\"id\": 1}}]}}, \"errors\": []}\n</code></pre></p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>All public API must be documented. Building documentation requires python 3.6+</p>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Install mkdocs, themes, and extensions.</p> <pre><code>pip install -r docs/requirements_docs.txt\n</code></pre>"},{"location":"contributing/#serving","title":"Serving","text":"<p>To serve the documentation locally run</p> <pre><code>mkdocs serve\n</code></pre> <p>and visit the docs at http://127.0.0.1:8000/pg_graphql/</p>"},{"location":"example_schema/","title":"Example Schema","text":"<p>The following is a complete example showing how a sample SQL schema translates into a GraphQL schema.</p> <pre><code>-- Turn on automatic inflection of type names\ncomment on schema public is '@graphql({\"inflect_names\": true})';\n\ncreate table account(\nid serial primary key,\nemail varchar(255) not null,\ncreated_at timestamp not null,\nupdated_at timestamp not null\n);\n\n-- enable a `totalCount` field on the `account` query type\ncomment on table account is e'@graphql({\"totalCount\": {\"enabled\": true}})';\n\ncreate table blog(\nid serial primary key,\nowner_id integer not null references account(id),\nname varchar(255) not null,\ndescription varchar(255),\ntags text[],\ncreated_at timestamp not null,\nupdated_at timestamp not null\n);\n\ncreate type blog_post_status as enum ('PENDING', 'RELEASED');\n\ncreate table blog_post(\nid uuid not null default gen_random_uuid() primary key,\nblog_id integer not null references blog(id),\ntitle varchar(255) not null,\nbody varchar(10000),\nstatus blog_post_status not null,\ncreated_at timestamp not null,\nupdated_at timestamp not null\n);\n</code></pre> <pre><code>type Account implements Node {\n\"\"\"Globally Unique Record Identifier\"\"\"\nnodeId: ID!\nid: Int!\nemail: String!\ncreatedAt: Datetime!\nupdatedAt: Datetime!\nblogCollection(\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"\nSkip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.\n\"\"\"\noffset: Int\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: BlogFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [BlogOrderBy!]\n): BlogConnection\n}\n\ntype AccountConnection {\nedges: [AccountEdge!]!\npageInfo: PageInfo!\n\n\"\"\"The total number of records matching the `filter` criteria\"\"\"\ntotalCount: Int!\n}\n\ntype AccountDeleteResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Account!]!\n}\n\ntype AccountEdge {\ncursor: String!\nnode: Account!\n}\n\ninput AccountFilter {\nid: IntFilter\nemail: StringFilter\ncreatedAt: DatetimeFilter\nupdatedAt: DatetimeFilter\nnodeId: IDFilter\n\n\"\"\"\nReturns true only if all its inner filters are true, otherwise returns false\n\"\"\"\nand: [AccountFilter!]\n\n\"\"\"\nReturns true if at least one of its inner filters is true, otherwise returns false\n\"\"\"\nor: [AccountFilter!]\n\n\"\"\"Negates a filter\"\"\"\nnot: AccountFilter\n}\n\ninput AccountInsertInput {\nemail: String\ncreatedAt: Datetime\nupdatedAt: Datetime\n}\n\ntype AccountInsertResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Account!]!\n}\n\ninput AccountOrderBy {\nid: OrderByDirection\nemail: OrderByDirection\ncreatedAt: OrderByDirection\nupdatedAt: OrderByDirection\n}\n\ninput AccountUpdateInput {\nemail: String\ncreatedAt: Datetime\nupdatedAt: Datetime\n}\n\ntype AccountUpdateResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Account!]!\n}\n\n\"\"\"A high precision floating point value represented as a string\"\"\"\nscalar BigFloat\n\n\"\"\"\nBoolean expression comparing fields on type \"BigFloat\"\n\"\"\"\ninput BigFloatFilter {\neq: BigFloat\ngt: BigFloat\ngte: BigFloat\nin: [BigFloat!]\nis: FilterIs\nlt: BigFloat\nlte: BigFloat\nneq: BigFloat\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"BigFloatList\"\n\"\"\"\ninput BigFloatListFilter {\ncd: [BigFloat!]\ncs: [BigFloat!]\neq: [BigFloat!]\ngt: [BigFloat!]\ngte: [BigFloat!]\nlt: [BigFloat!]\nlte: [BigFloat!]\nneq: [BigFloat!]\nov: [BigFloat!]\n}\n\n\"\"\"An arbitrary size integer represented as a string\"\"\"\nscalar BigInt\n\n\"\"\"\nBoolean expression comparing fields on type \"BigInt\"\n\"\"\"\ninput BigIntFilter {\neq: BigInt\ngt: BigInt\ngte: BigInt\nin: [BigInt!]\nis: FilterIs\nlt: BigInt\nlte: BigInt\nneq: BigInt\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"BigIntList\"\n\"\"\"\ninput BigIntListFilter {\ncd: [BigInt!]\ncs: [BigInt!]\neq: [BigInt!]\ngt: [BigInt!]\ngte: [BigInt!]\nlt: [BigInt!]\nlte: [BigInt!]\nneq: [BigInt!]\nov: [BigInt!]\n}\n\ntype Blog implements Node {\n\"\"\"Globally Unique Record Identifier\"\"\"\nnodeId: ID!\nid: Int!\nownerId: Int!\nname: String!\ndescription: String\ntags: [String]\ncreatedAt: Datetime!\nupdatedAt: Datetime!\nowner: Account!\nblogPostCollection(\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"\nSkip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.\n\"\"\"\noffset: Int\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: BlogPostFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [BlogPostOrderBy!]\n): BlogPostConnection\n}\n\ntype BlogConnection {\nedges: [BlogEdge!]!\npageInfo: PageInfo!\n}\n\ntype BlogDeleteResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Blog!]!\n}\n\ntype BlogEdge {\ncursor: String!\nnode: Blog!\n}\n\ninput BlogFilter {\nid: IntFilter\nownerId: IntFilter\nname: StringFilter\ndescription: StringFilter\ntags: StringListFilter\ncreatedAt: DatetimeFilter\nupdatedAt: DatetimeFilter\nnodeId: IDFilter\n\n\"\"\"\nReturns true only if all its inner filters are true, otherwise returns false\n\"\"\"\nand: [BlogFilter!]\n\n\"\"\"\nReturns true if at least one of its inner filters is true, otherwise returns false\n\"\"\"\nor: [BlogFilter!]\n\n\"\"\"Negates a filter\"\"\"\nnot: BlogFilter\n}\n\ninput BlogInsertInput {\nownerId: Int\nname: String\ndescription: String\ncreatedAt: Datetime\nupdatedAt: Datetime\n}\n\ntype BlogInsertResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Blog!]!\n}\n\ninput BlogOrderBy {\nid: OrderByDirection\nownerId: OrderByDirection\nname: OrderByDirection\ndescription: OrderByDirection\ncreatedAt: OrderByDirection\nupdatedAt: OrderByDirection\n}\n\ntype BlogPost implements Node {\n\"\"\"Globally Unique Record Identifier\"\"\"\nnodeId: ID!\nid: UUID!\nblogId: Int!\ntitle: String!\nbody: String\nstatus: BlogPostStatus!\ncreatedAt: Datetime!\nupdatedAt: Datetime!\nblog: Blog!\n}\n\ntype BlogPostConnection {\nedges: [BlogPostEdge!]!\npageInfo: PageInfo!\n}\n\ntype BlogPostDeleteResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [BlogPost!]!\n}\n\ntype BlogPostEdge {\ncursor: String!\nnode: BlogPost!\n}\n\ninput BlogPostFilter {\nid: UUIDFilter\nblogId: IntFilter\ntitle: StringFilter\nbody: StringFilter\nstatus: BlogPostStatusFilter\ncreatedAt: DatetimeFilter\nupdatedAt: DatetimeFilter\nnodeId: IDFilter\n\n\"\"\"\nReturns true only if all its inner filters are true, otherwise returns false\n\"\"\"\nand: [BlogPostFilter!]\n\n\"\"\"\nReturns true if at least one of its inner filters is true, otherwise returns false\n\"\"\"\nor: [BlogPostFilter!]\n\n\"\"\"Negates a filter\"\"\"\nnot: BlogPostFilter\n}\n\ninput BlogPostInsertInput {\nid: UUID\nblogId: Int\ntitle: String\nbody: String\nstatus: BlogPostStatus\ncreatedAt: Datetime\nupdatedAt: Datetime\n}\n\ntype BlogPostInsertResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [BlogPost!]!\n}\n\ninput BlogPostOrderBy {\nid: OrderByDirection\nblogId: OrderByDirection\ntitle: OrderByDirection\nbody: OrderByDirection\nstatus: OrderByDirection\ncreatedAt: OrderByDirection\nupdatedAt: OrderByDirection\n}\n\nenum BlogPostStatus {\nPENDING\nRELEASED\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"BlogPostStatus\"\n\"\"\"\ninput BlogPostStatusFilter {\neq: BlogPostStatus\nin: [BlogPostStatus!]\nis: FilterIs\nneq: BlogPostStatus\n}\n\ninput BlogPostUpdateInput {\nid: UUID\nblogId: Int\ntitle: String\nbody: String\nstatus: BlogPostStatus\ncreatedAt: Datetime\nupdatedAt: Datetime\n}\n\ntype BlogPostUpdateResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [BlogPost!]!\n}\n\ninput BlogUpdateInput {\nownerId: Int\nname: String\ndescription: String\ncreatedAt: Datetime\nupdatedAt: Datetime\n}\n\ntype BlogUpdateResponse {\n\"\"\"Count of the records impacted by the mutation\"\"\"\naffectedCount: Int!\n\n\"\"\"Array of records impacted by the mutation\"\"\"\nrecords: [Blog!]!\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"Boolean\"\n\"\"\"\ninput BooleanFilter {\neq: Boolean\nis: FilterIs\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"BooleanList\"\n\"\"\"\ninput BooleanListFilter {\ncd: [Boolean!]\ncs: [Boolean!]\neq: [Boolean!]\ngt: [Boolean!]\ngte: [Boolean!]\nlt: [Boolean!]\nlte: [Boolean!]\nneq: [Boolean!]\nov: [Boolean!]\n}\n\n\"\"\"\nAn opaque string using for tracking a position in results during pagination\n\"\"\"\nscalar Cursor\n\n\"\"\"A date wihout time information\"\"\"\nscalar Date\n\n\"\"\"\nBoolean expression comparing fields on type \"Date\"\n\"\"\"\ninput DateFilter {\neq: Date\ngt: Date\ngte: Date\nin: [Date!]\nis: FilterIs\nlt: Date\nlte: Date\nneq: Date\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"DateList\"\n\"\"\"\ninput DateListFilter {\ncd: [Date!]\ncs: [Date!]\neq: [Date!]\ngt: [Date!]\ngte: [Date!]\nlt: [Date!]\nlte: [Date!]\nneq: [Date!]\nov: [Date!]\n}\n\n\"\"\"A date and time\"\"\"\nscalar Datetime\n\n\"\"\"\nBoolean expression comparing fields on type \"Datetime\"\n\"\"\"\ninput DatetimeFilter {\neq: Datetime\ngt: Datetime\ngte: Datetime\nin: [Datetime!]\nis: FilterIs\nlt: Datetime\nlte: Datetime\nneq: Datetime\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"DatetimeList\"\n\"\"\"\ninput DatetimeListFilter {\ncd: [Datetime!]\ncs: [Datetime!]\neq: [Datetime!]\ngt: [Datetime!]\ngte: [Datetime!]\nlt: [Datetime!]\nlte: [Datetime!]\nneq: [Datetime!]\nov: [Datetime!]\n}\n\nenum FilterIs {\nNULL\nNOT_NULL\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"Float\"\n\"\"\"\ninput FloatFilter {\neq: Float\ngt: Float\ngte: Float\nin: [Float!]\nis: FilterIs\nlt: Float\nlte: Float\nneq: Float\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"FloatList\"\n\"\"\"\ninput FloatListFilter {\ncd: [Float!]\ncs: [Float!]\neq: [Float!]\ngt: [Float!]\ngte: [Float!]\nlt: [Float!]\nlte: [Float!]\nneq: [Float!]\nov: [Float!]\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"ID\"\n\"\"\"\ninput IDFilter {\neq: ID\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"IDList\"\n\"\"\"\ninput IDListFilter {\ncd: [ID!]\ncs: [ID!]\neq: [ID!]\ngt: [ID!]\ngte: [ID!]\nlt: [ID!]\nlte: [ID!]\nneq: [ID!]\nov: [ID!]\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"Int\"\n\"\"\"\ninput IntFilter {\neq: Int\ngt: Int\ngte: Int\nin: [Int!]\nis: FilterIs\nlt: Int\nlte: Int\nneq: Int\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"IntList\"\n\"\"\"\ninput IntListFilter {\ncd: [Int!]\ncs: [Int!]\neq: [Int!]\ngt: [Int!]\ngte: [Int!]\nlt: [Int!]\nlte: [Int!]\nneq: [Int!]\nov: [Int!]\n}\n\n\"\"\"A Javascript Object Notation value serialized as a string\"\"\"\nscalar JSON\n\n\"\"\"The root type for creating and mutating data\"\"\"\ntype Mutation {\n\"\"\"Deletes zero or more records from the `Account` collection\"\"\"\ndeleteFromAccountCollection(\n\"\"\"Restricts the mutation's impact to records matching the criteria\"\"\"\nfilter: AccountFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n): AccountDeleteResponse!\n\n\"\"\"Deletes zero or more records from the `Blog` collection\"\"\"\ndeleteFromBlogCollection(\n\"\"\"Restricts the mutation's impact to records matching the criteria\"\"\"\nfilter: BlogFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n): BlogDeleteResponse!\n\n\"\"\"Deletes zero or more records from the `BlogPost` collection\"\"\"\ndeleteFromBlogPostCollection(\n\"\"\"Restricts the mutation's impact to records matching the criteria\"\"\"\nfilter: BlogPostFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n): BlogPostDeleteResponse!\n\n\"\"\"Adds one or more `Account` records to the collection\"\"\"\ninsertIntoAccountCollection(objects: [AccountInsertInput!]!): AccountInsertResponse\n\n\"\"\"Adds one or more `Blog` records to the collection\"\"\"\ninsertIntoBlogCollection(objects: [BlogInsertInput!]!): BlogInsertResponse\n\n\"\"\"Adds one or more `BlogPost` records to the collection\"\"\"\ninsertIntoBlogPostCollection(objects: [BlogPostInsertInput!]!): BlogPostInsertResponse\n\n\"\"\"Updates zero or more records in the `Account` collection\"\"\"\nupdateAccountCollection(\n\"\"\"\nFields that are set will be updated for all records matching the `filter`\n\"\"\"\nset: AccountUpdateInput!\n\n\"\"\"Restricts the mutation's impact to records matching the criteria\"\"\"\nfilter: AccountFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n): AccountUpdateResponse!\n\n\"\"\"Updates zero or more records in the `Blog` collection\"\"\"\nupdateBlogCollection(\n\"\"\"\nFields that are set will be updated for all records matching the `filter`\n\"\"\"\nset: BlogUpdateInput!\n\n\"\"\"Restricts the mutation's impact to records matching the criteria\"\"\"\nfilter: BlogFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n): BlogUpdateResponse!\n\n\"\"\"Updates zero or more records in the `BlogPost` collection\"\"\"\nupdateBlogPostCollection(\n\"\"\"\nFields that are set will be updated for all records matching the `filter`\n\"\"\"\nset: BlogPostUpdateInput!\n\n\"\"\"Restricts the mutation's impact to records matching the criteria\"\"\"\nfilter: BlogPostFilter\n\n\"\"\"\nThe maximum number of records in the collection permitted to be affected\n\"\"\"\natMost: Int! = 1\n): BlogPostUpdateResponse!\n}\n\ninterface Node {\n\"\"\"Retrieves a record by `ID`\"\"\"\nnodeId: ID!\n}\n\n\"\"\"Any type not handled by the type system\"\"\"\nscalar Opaque\n\n\"\"\"\nBoolean expression comparing fields on type \"Opaque\"\n\"\"\"\ninput OpaqueFilter {\neq: Opaque\nis: FilterIs\n}\n\n\"\"\"Defines a per-field sorting order\"\"\"\nenum OrderByDirection {\n\"\"\"Ascending order, nulls first\"\"\"\nAscNullsFirst\n\n\"\"\"Ascending order, nulls last\"\"\"\nAscNullsLast\n\n\"\"\"Descending order, nulls first\"\"\"\nDescNullsFirst\n\n\"\"\"Descending order, nulls last\"\"\"\nDescNullsLast\n}\n\ntype PageInfo {\nendCursor: String\nhasNextPage: Boolean!\nhasPreviousPage: Boolean!\nstartCursor: String\n}\n\n\"\"\"The root type for querying data\"\"\"\ntype Query {\n\"\"\"A pagable collection of type `Account`\"\"\"\naccountCollection(\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"\nSkip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.\n\"\"\"\noffset: Int\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: AccountFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [AccountOrderBy!]\n): AccountConnection\n\n\"\"\"A pagable collection of type `Blog`\"\"\"\nblogCollection(\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"\nSkip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.\n\"\"\"\noffset: Int\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: BlogFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [BlogOrderBy!]\n): BlogConnection\n\n\"\"\"A pagable collection of type `BlogPost`\"\"\"\nblogPostCollection(\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"\nSkip n values from the after cursor. Alternative to cursor pagination. Backward pagination not supported.\n\"\"\"\noffset: Int\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: BlogPostFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [BlogPostOrderBy!]\n): BlogPostConnection\n\n\"\"\"Retrieve a record by its `ID`\"\"\"\nnode(\n\"\"\"The record's `ID`\"\"\"\nnodeId: ID!\n): Node\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"String\"\n\"\"\"\ninput StringFilter {\neq: String\ngt: String\ngte: String\nilike: String\nin: [String!]\niregex: String\nis: FilterIs\nlike: String\nlt: String\nlte: String\nneq: String\nregex: String\nstartsWith: String\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"StringList\"\n\"\"\"\ninput StringListFilter {\ncd: [String!]\ncs: [String!]\neq: [String!]\ngt: [String!]\ngte: [String!]\nlt: [String!]\nlte: [String!]\nneq: [String!]\nov: [String!]\n}\n\n\"\"\"A time without date information\"\"\"\nscalar Time\n\n\"\"\"\nBoolean expression comparing fields on type \"Time\"\n\"\"\"\ninput TimeFilter {\neq: Time\ngt: Time\ngte: Time\nin: [Time!]\nis: FilterIs\nlt: Time\nlte: Time\nneq: Time\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"TimeList\"\n\"\"\"\ninput TimeListFilter {\ncd: [Time!]\ncs: [Time!]\neq: [Time!]\ngt: [Time!]\ngte: [Time!]\nlt: [Time!]\nlte: [Time!]\nneq: [Time!]\nov: [Time!]\n}\n\n\"\"\"A universally unique identifier\"\"\"\nscalar UUID\n\n\"\"\"\nBoolean expression comparing fields on type \"UUID\"\n\"\"\"\ninput UUIDFilter {\neq: UUID\nin: [UUID!]\nis: FilterIs\nneq: UUID\n}\n\n\"\"\"\nBoolean expression comparing fields on type \"UUIDList\"\n\"\"\"\ninput UUIDListFilter {\ncd: [UUID!]\ncs: [UUID!]\neq: [UUID!]\ngt: [UUID!]\ngte: [UUID!]\nlt: [UUID!]\nlte: [UUID!]\nneq: [UUID!]\nov: [UUID!]\n}\n</code></pre>"},{"location":"functions/","title":"Functions","text":"<p>Functions can be exposed by pg_graphql to allow running custom queries or mutations.</p>"},{"location":"functions/#query-vs-mutation","title":"Query vs Mutation","text":"<p>For example, a function to add two numbers will be available on the query type as a field:</p> FunctionQueryTypeQueryResponse <pre><code>create function \"addNums\"(a int, b int)\nreturns int\nimmutable\nlanguage sql\nas $$ select a + b; $$;\n</code></pre> <pre><code>type Query {\naddNums(a: Int!, b: Int!): Int\n}\n</code></pre> <pre><code>query {\naddNums(a: 2, b: 3)\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"addNums\": 5\n}\n}\n</code></pre> <p>Functions marked <code>immutable</code> or <code>stable</code> are available on the query type. Functions marked with the default <code>volatile</code> category are available on the mutation type:</p> FunctionMutationTypeQueryResponse <pre><code>create table account(\nid serial primary key,\nemail varchar(255) not null\n);\n\ncreate function \"addAccount\"(email text)\nreturns int\nvolatile\nlanguage sql\nas $$ insert into account (email) values (email) returning id; $$;\n</code></pre> <pre><code>type Mutation {\naddAccount(email: String!): Int\n}\n</code></pre> <pre><code>mutation {\naddAccount(email: \"email@example.com\")\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"addAccount\": 1\n}\n}\n</code></pre>"},{"location":"functions/#supported-return-types","title":"Supported Return Types","text":"<p>Built-in GraphQL scalar types <code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code> and custom scalar types are supported as function arguments and return types. Function types returning a table or view are supported as well. Such functions implement the Node interface:</p> FunctionQueryTypeQueryResponse <pre><code>create table account(\nid serial primary key,\nemail varchar(255) not null\n);\n\ninsert into account(email)\nvalues\n('a@example.com'),\n('b@example.com');\n\ncreate function \"accountById\"(\"accountId\" int)\nreturns account\nstable\nlanguage sql\nas $$ select id, email from account where id = \"accountId\"; $$;\n</code></pre> <pre><code>type Query {\naccountById(email: String!): Account\n}\n</code></pre> <pre><code>query {\naccountById(accountId: 1) {\nid\nemail\nnodeId\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"accountById\": {\n\"id\": 1,\n\"email\": \"a@example.com\"\n\"nodeId\": \"WyJwdWJsaWMiLCAiYWNjb3VudCIsIDFd\"\n}\n}\n}\n</code></pre> <p>Since Postgres considers a row/composite type containing only null values to be null, the result can be a little surprising in this case. Instead of an object with all columns null, the top-level field is null:</p> FunctionQueryResponse <pre><code>create table account(\nid int,\nemail varchar(255),\nname text null\n);\n\ninsert into account(id, email, name)\nvalues\n(1, 'aardvark@x.com', 'aardvark'),\n(2, 'bat@x.com', null),\n(null, null, null);\n\ncreate function \"returnsAccountWithAllNullColumns\"()\nreturns account language sql stable\nas $$ select id, email, name from account where id is null; $$;\n</code></pre> <pre><code>query {\nreturnsAccountWithAllNullColumns {\nid\nemail\nname\n__typename\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"returnsAccountWithAllNullColumns\": null\n}\n}\n</code></pre> <p>Functions returning multiple rows of a table or view are exposed as collections.</p> FunctionQueryTypeQueryResponse <pre><code>create table \"Account\"(\nid serial primary key,\nemail varchar(255) not null\n);\n\ninsert into \"Account\"(email)\nvalues\n('a@example.com'),\n('a@example.com'),\n('b@example.com');\n\ncreate function \"accountsByEmail\"(\"emailToSearch\" text)\nreturns setof \"Account\"\nstable\nlanguage sql\nas $$ select id, email from \"Account\" where email = \"emailToSearch\"; $$;\n</code></pre> <pre><code>type Query {\naccountsByEmail(\nemailToSearch: String!\n\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: AccountFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [AccountOrderBy!]\n): AccountConnection\n}\n</code></pre> <pre><code>query {\naccountsByEmail(emailToSearch: \"a@example.com\", first: 1) {\nedges {\nnode {\nid\nemail\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"accountsByEmail\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"email\": \"a@example.com\"\n}\n}\n]\n}\n}\n}\n</code></pre> <p>Note</p> <p>A set returning function with any of its argument names clashing with argument names of a collection (<code>first</code>, <code>last</code>, <code>before</code>, <code>after</code>, <code>filter</code>, or <code>orderBy</code>) will not be exposed.</p> <p>Functions accepting or returning arrays of non-composite types are also supported. In the following example, the <code>ids</code> array is used to filter rows from the <code>Account</code> table:</p> FunctionQueryTypeQueryResponse <pre><code>create table \"Account\"(\nid serial primary key,\nemail varchar(255) not null\n);\n\ninsert into \"Account\"(email)\nvalues\n('a@example.com'),\n('b@example.com'),\n('c@example.com');\n\ncreate function \"accountsByIds\"(\"ids\" int[])\nreturns setof \"Account\"\nstable\nlanguage sql\nas $$ select id, email from \"Account\" where id = any(ids); $$;\n</code></pre> <pre><code>type Query {\naccountsByIds(\nids: Int[]!\n\n\"\"\"Query the first `n` records in the collection\"\"\"\nfirst: Int\n\n\"\"\"Query the last `n` records in the collection\"\"\"\nlast: Int\n\n\"\"\"Query values in the collection before the provided cursor\"\"\"\nbefore: Cursor\n\n\"\"\"Query values in the collection after the provided cursor\"\"\"\nafter: Cursor\n\n\"\"\"Filters to apply to the results set when querying from the collection\"\"\"\nfilter: AccountFilter\n\n\"\"\"Sort order to apply to the collection\"\"\"\norderBy: [AccountOrderBy!]\n): AccountConnection\n}\n</code></pre> <pre><code>query {\naccountsByIds(ids: [1, 2]) {\nedges {\nnode {\nid\nemail\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"accountsByIds\": {\n\"edges\": [\n{\n\"node\": {\n\"id\": 1,\n\"email\": \"a@example.com\"\n}\n},\n{\n\"node\": {\n\"id\": 2,\n\"email\": \"b@example.com\"\n}\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"functions/#default-arguments","title":"Default Arguments","text":"<p>Arguments without a default value are required in the GraphQL schema, to make them optional they should have a default value.</p> FunctionQueryTypeQueryResponse <pre><code>create function \"addNums\"(a int default 1, b int default 2)\nreturns int\nimmutable\nlanguage sql\nas $$ select a + b; $$;\n</code></pre> <pre><code>type Query {\naddNums(a: Int, b: Int): Int\n}\n</code></pre> <pre><code>query {\naddNums(b: 20)\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"addNums\": 21\n}\n}\n</code></pre> <p>If there is no sensible default, and you still want to make the argument optional, consider using the default value null.</p> FunctionQueryTypeQueryResponse <pre><code>create function \"addNums\"(a int default null, b int default null)\nreturns int\nimmutable\nlanguage plpgsql\nas $$\nbegin\n\nif a is null and b is null then\nraise exception 'a and b both can''t be null';\nend if;\n\nif a is null then\nreturn b;\nend if;\n\nif b is null then\nreturn a;\nend if;\n\nreturn a + b;\nend;\n$$;\n</code></pre> <pre><code>type Query {\naddNums(a: Int, b: Int): Int\n}\n</code></pre> <pre><code>query {\naddNums(a: 42)\n}\n</code></pre> <pre><code>{\n\"data\": {\n\"addNums\": 42\n}\n}\n</code></pre> <p>Currently, null defaults are only supported as simple expressions, as shown in the previous example.</p>"},{"location":"functions/#limitations","title":"Limitations","text":"<p>The following features are not yet supported. Any function using these features is not exposed in the API:</p> <ul> <li>Functions that accept a table's tuple type</li> <li>Overloaded functions</li> <li>Functions with a nameless argument</li> <li>Functions returning void</li> <li>Variadic functions</li> <li>Functions that accept or return an array of composite type</li> <li>Functions that accept or return an enum type or an array of enum type</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>First, install pgrx by running <code>cargo install --locked cargo-pgrx@version</code>, where version should be compatible with the pgrx version used by pg_graphql.</p> <p>Then clone the repo and install using:</p> <pre><code>git clone https://github.com/supabase/pg_graphql.git\ncd pg_graphql\ncargo pgrx install --release\n</code></pre> <p>Before enabling the extension you need to initialize <code>pgrx</code>. The easiest way to get started is to allow <code>pgrx</code> to manage its own version/s of Postgres:</p> <pre><code>cargo pgrx init --pg16=download\n</code></pre> <p>For more advanced configuration options, like building against an existing Postgres installation from e.g. Homebrew, see the pgrx docs</p> <p>To start the database:</p> <pre><code>cargo pgrx start pg16\n</code></pre> <p>To connect:</p> <pre><code>cargo pgrx connect pg16\n</code></pre> <p>Finally, to enable the <code>pg_graphql</code> extension in Postgres, execute the <code>create extension</code> statement. This extension creates its own schema/namespace named <code>graphql</code> to avoid naming conflicts.</p> <pre><code>create extension pg_graphql;\n</code></pre> <p>These steps ensure that <code>pgrx</code> is properly initialized, and the database is started and connected before attempting to install and use the <code>pg_graphql</code> extension.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>If you are new to the project, start here.</p> <p>The easiest way to try <code>pg_graphql</code> is to run the interactive GraphiQL IDE demo. The demo environment launches a database, webserver and the GraphiQL IDE/API explorer with a small pre-populated schema.</p> <p>Requires:</p> <ul> <li>git</li> <li>docker-compose</li> </ul> <p>First, clone the repo</p> <pre><code>git clone https://github.com/supabase/pg_graphql.git\ncd pg_graphql\n</code></pre> <p>Next, launch the demo with docker-compose.</p> <pre><code>docker-compose up\n</code></pre> <p>Finally, access GraphiQL at <code>http://localhost:4000/</code>.</p> <p></p>"},{"location":"security/","title":"Security","text":"<p><code>pg_graphql</code> fully respects builtin PostgreSQL role and row security.</p>"},{"location":"security/#tablecolumn-visibility","title":"Table/Column Visibility","text":"<p>Table and column visibility in the GraphQL schema are controlled by standard PostgreSQL role permissions. Revoking <code>SELECT</code> access from the user/role executing queries removes that entity from the visible schema.</p> <p>For example: <pre><code>revoke all privileges on public.\"Account\" from api_user;\n</code></pre></p> <p>removes the <code>Account</code> GraphQL type.</p> <p>Similarly, revoking <code>SELECT</code> access on a table's column will remove that field from the associated GraphQL type/s.</p> <p>The permissions <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> all impact the relevant sections of the GraphQL schema.</p>"},{"location":"security/#row-visibility","title":"Row Visibility","text":"<p>Visibility of rows in a given table can be configured using PostgreSQL's built-in row level security policies.</p>"},{"location":"sql_interface/","title":"SQL Interface","text":"<p>pg_graphql's public facing SQL interface consists of a single SQL function to resolve GraphQL requests. All other entities in the <code>graphql</code> schema are private.</p>"},{"location":"sql_interface/#graphqlresolve","title":"graphql.resolve","text":""},{"location":"sql_interface/#description","title":"description","text":"<p>Resolves a GraphQL query, returning JSONB.</p>"},{"location":"sql_interface/#signature","title":"signature","text":"<pre><code>graphql.resolve(\n-- graphql query/mutation\nquery text,\n-- json key/values pairs for variables\nvariables jsonb default '{}'::jsonb,\n-- the name of the graphql operation in *query* to execute\n\"operationName\" text default null,\n-- extensions to include in the request\nextensions jsonb default null,\n)\nreturns jsonb\n\nstrict\nvolatile\nparallel safe\nlanguage plpgsql\n</code></pre>"},{"location":"sql_interface/#usage","title":"usage","text":"<pre><code>-- Create the extension\ngraphqldb= create extension pg_graphql;\nCREATE EXTENSION\n\n-- Create an example table\ngraphqldb= create table book(id int primary key, title text);\nCREATE TABLE\n\n-- Insert a record\ngraphqldb= insert into book(id, title) values (1, 'book 1');\nINSERT 0 1\n\n-- Query the table via GraphQL\ngraphqldb= select graphql.resolve($$\nquery {\nbookCollection {\nedges {\nnode {\nid\n}\n}\n}\n}\n$$);\n\nresolve\n----------------------------------------------------------------------\n{\"data\": {\"bookCollection\": {\"edges\": [{\"node\": {\"id\": 1}}]}}, \"errors\": []}\n</code></pre>"},{"location":"supabase/","title":"Supabase","text":"<p>The Supabase GraphQL API is automatically reflected from your database's schema using pg_graphql. It supports:</p> <ul> <li>Basic CRUD operations (Create/Read/Update/Delete)</li> <li>Support for Tables, Views, Materialized Views, and Foreign Tables</li> <li>Arbitrarily deep relationships among tables/views</li> <li>User defined computed fields</li> <li>Postgres' security model - including Row Level Security, Roles, and Grants</li> </ul> <p>All requests resolve in a single round-trip leading to fast response times and high throughput.</p> <p>If you haven't created a Supabase project, do that here so you can follow along with the guide.</p>"},{"location":"supabase/#quickstart","title":"Quickstart","text":"<p><code>https://&lt;PROJECT_REF&gt;.supabase.co/graphql/v1</code> is your project's GraphQL API endpoint. See PROJECT_REF for instructions on finding your project's reference. Note that the url does not allow a trailing <code>/</code>.</p> <p>To access the API you MUST provide your project's API key as a header in every request. For example see line 2 of the cURL request below.</p> <pre><code>curl -X POST https://&lt;PROJECT_REF&gt;.supabase.co/graphql/v1 \\\n-H 'apiKey: &lt;API_KEY&gt;' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"query\": \"{ accountCollection(first: 1) { edges { node { id } } } }\", \"variables\": {}}'\n</code></pre> <p>For user authentication, pass an <code>Authorization</code> header e.g. <pre><code>    -H 'Authorization: Bearer &lt;JWT&gt;'\n</code></pre> See the auth docs to understand how to sign-up/sign-in users to your application and retrieve a JWT. The apollo and relay guides also include complete examples of using Supabase Auth with GraphQL. Supabase Auth works with row level security (RLS) allowing you to control which users can access tables/rows.</p> <p>The fastest way to get started with GraphQL on Supabase is using the GraphQL IDE (GraphiQL) built directly into Supabase Studio.</p>"},{"location":"supabase/#clients","title":"Clients","text":"<p>If you're new to GraphQL or Supabase, we strongly recommend starting with Supabase GraphQL by following the Supabase Studio guide.</p> <p>For more experienced users, or when you're ready to productionize your application, access the API using supabase-js, GraphiQL, or any HTTP client, for example cURL.</p>"},{"location":"supabase/#supabase-studio","title":"Supabase Studio","text":"<p>The easiest way to make a GraphQL request with Supabase is to use Supabase Studio's builtin GraphiQL IDE. You can access GraphiQL here by selecting the relevant project. Alternatively, navigate there within Studio at <code>API Docs &gt; GraphQL &gt; GraphiQL</code>.</p> <p></p> <p>Type queries in the central query editor and use the green icon to submit requests to the server. Results are shown in the output display to the right of the editor.</p> <p>To explore the API visually, select the docs icon shown below and navigate through each type to see how they connect to the Graph.</p> <p></p> <p>pg_graphql mirrors the structure of the project's SQL schema in the GraphQL API. If your project is new and empty, the GraphQL API will be empty as well, with the exception of basic introspection types. For a more interesting result, go to the SQL or table editor and create a table.</p> <p></p> <p>Head back to GraphiQL to see the new table reflected in your GraphQL API's Query and Mutation types.</p> <p></p> <p>If you'd like your type and field names to match the GraphQL convention of <code>PascalCase</code> for types and <code>camelCase</code> for fields, check out the pg_graphql inflection guide.</p>"},{"location":"supabase/#http-request","title":"HTTP Request","text":"<p>To access the GraphQL API over HTTP, first collect your project reference and API Key.</p>"},{"location":"supabase/#curl","title":"cURL","text":"<p>To hit the Supabase GraphQL API using cURL, submit a <code>POST</code> request to your GraphQL API's URL shown below, substituting in your PROJECT_REF and passing the project's API_KEY as the <code>apiKey</code> header:</p> <pre><code>curl -X POST https://&lt;PROJECT_REF&gt;.supabase.co/graphql/v1 \\\n-H 'apiKey: &lt;API_KEY&gt;' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"query\": \"{ accountCollection(first: 1) { edges { node { id } } } }\", \"variables\": {}}'\n</code></pre> <p>In that example, the GraphQL <code>query</code> is <pre><code>{\naccountCollection(first: 1) {\nedges {\nnode {\nid\n}\n}\n}\n}\n</code></pre></p> <p>and there are no <code>variables</code> <pre><code>{}\n</code></pre></p>"},{"location":"supabase/#supabase-js","title":"supabase-js","text":"<p>The JS ecosystem supports multiple prominent GraphQL frameworks. supabase-js is unopinionated about your GraphQL tooling and can integrate with all of them.</p> <p>For an example integration, check out the Relay guide, complete with Supabase Auth support.</p>"},{"location":"supabase/#graphiql","title":"GraphiQL","text":"<p>If you'd prefer to connect to Supabase GraphQL using an external IDE like GraphiQL, save the HTML snippet below as <code>supabase_graphiql.html</code> and open it in your browser. Be sure to substitute in your PROJECT_REF and API_KEY beneath the <code>EDIT BELOW</code> comment:</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;GraphiQL&lt;/title&gt;\n    &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/graphiql/2.4.7/graphiql.css\" rel=\"stylesheet\" /&gt;\n  &lt;/head&gt;\n  &lt;body style=\"margin: 0;\"&gt;\n    &lt;div id=\"graphiql\" style=\"height: 100vh;\"&gt;&lt;/div&gt;\n    &lt;script crossorigin src=\"https://unpkg.com/react@18/umd/react.production.min.js\"&gt;&lt;/script&gt;\n    &lt;script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"&gt;&lt;/script&gt;\n    &lt;script\n      crossorigin\n      src=\"https://cdnjs.cloudflare.com/ajax/libs/graphiql/2.4.7/graphiql.js\"\n    &gt;&lt;/script&gt;\n    &lt;script&gt;\n\n////////////////\n// EDIT BELOW //\n////////////////\n\nconst fetcher = GraphiQL.createFetcher({\nurl: 'https://&lt;PROJECT_REF&gt;.supabase.co/graphql/v1',\nheaders: {\n\"apiKey\": \"&lt;API_KEY&gt;\",\n}\n});\nReactDOM.render(\nReact.createElement(GraphiQL, { fetcher: fetcher }),\ndocument.getElementById('graphiql'),\n);\n&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"supabase/#schema-table-visibility","title":"Schema &amp; Table Visibility","text":"<p>pg_graphql uses Postgres' <code>search_path</code> and permissions system to determine which schemas and entities are exposed in the GraphQL schema. By default on Supabase, tables, views, and functions in the <code>public</code> schema are visible to anonymous (<code>anon</code>) and logged in (<code>authenticated</code>) roles.</p>"},{"location":"supabase/#remove-a-table-from-the-api","title":"Remove a Table from the API","text":"<p>To remove a table from the GraphQL API, you can revoke permission on that table from the the relevant role. For example, to remove table <code>foo</code> from the API for anonymous users you could run:</p> <pre><code>revoke all on table public.foo from anon;\n</code></pre> <p>You can similarly revoke permissions using the more granular <code>insert</code>, <code>update</code>, <code>delete</code>, and <code>truncate</code> permissions to remove individual entrypoints in the GraphQL API. For example, revoking <code>update</code> permission removes the <code>updateFooCollection</code> entrypoing in the API's <code>Mutation</code> type.</p>"},{"location":"supabase/#add-a-schema-to-the-api","title":"Add a Schema to the API","text":"<p>Adding a schema to the GraphQL API is a two step process.</p> <p>First, we need to add the new schema to the API search path. In the example below, we add a comma separated value for the new <code>app</code> schema:</p> <p></p> <p>Next, make sure the schema and entities (tables/views/functions) that you intend to expose are accessible by the relevant roles. For example, to match permissions from the public schema:</p> <pre><code>grant usage on schema app to anon, authenticated, service_role;\ngrant all privileges on all tables in schema app to anon, authenticated, service_role;\ngrant all privileges on all routines in schema app to anon, authenticated, service_role;\ngrant all privileges on all sequences in schema app to anon, authenticated, service_role;\nalter default privileges for role postgres in schema app grant all on tables to anon, authenticated, service_role;\nalter default privileges for role postgres in schema app grant all on routines to anon, authenticated, service_role;\nalter default privileges for role postgres in schema app grant all on sequences to anon, authenticated, service_role;\n</code></pre> <p>Note that in practice you likely prefer a more secure set of permissions, particularly for anonymous API users.</p>"},{"location":"supabase/#version-management","title":"Version Management","text":"<p>To maximize stability, you are in control of when to upgrade your GraphQL API. To see which version of pg_graphql you have, and the highest upgrade version available, execute:</p> <pre><code>select * from pg_available_extensions where name = 'pg_graphql'\n</code></pre> <p>Which returns a table, for example:</p> name default_version installed_version comment pg_graphql 1.2.0 1.1.0 GraphQL support <p>The <code>default_version</code> is the highest version available on your database. The <code>installed_version</code> is the version currently enabled in your database. If the two differ, as in the example, you can upgrade your installed version by running:</p> <pre><code>drop extension pg_graphql;   -- drop version 1.1.0\ncreate extension pg_graphql; -- install default version 1.2.0\n</code></pre> <p>To upgrade your GraphQL API with 0 downtime.</p> <p>When making a decision to upgrade, you can review features of the upgraded version in the changelog.</p> <p>Always test a new version of pg_graphql extensively on a development or staging instance before updating your production instance. pg_graphql follows SemVer, which makes API backwards compatibility relatively safe for minor and patch updates. Even so, it's critical to verify that changes do not negatively impact the specifics of your project's API in other ways, e.g. requests/sec or CPU load.</p>"},{"location":"supabase/#local-development","title":"Local Development","text":"<p>When starting a local project through the Supabase CLI, the output of <code>supabase start</code> provides the information needed to call the GraphQL API directly. You can also use the Supabase Studio url to access the builtin GraphiQL IDE.</p> <pre><code>&gt; supabase start\n...\n\nStarted supabase local development setup.\n\n     GraphQL URL: http://localhost:54321/graphql/v1  &lt;-- GraphQL endpoint\n          DB URL: ...\n      Studio URL: http://localhost:54323             &lt;-- Supabase Studio\n    Inbucket URL: ...\n      JWT secret: ...\n        anon key: eyJhbGciOiJIUzI1...&lt;truncated&gt;     &lt;-- API_KEY\nservice_role key: ...\n</code></pre>"},{"location":"supabase/#term-reference","title":"Term Reference","text":""},{"location":"supabase/#project-reference-project_ref","title":"Project Reference (PROJECT_REF)","text":"<p>Your Supabase project reference or PROJECT_REF is a 20 digit unique identifier for your project, for example <code>bvykdyhlwawojivopztl</code>. The project reference is used throughout your supabase application including the project's API URL. You can find the project reference in by logging in to Supabase Studio and navigating to <code>Settings &gt; General &gt; Project Settings &gt; Reference ID</code></p> <p></p>"},{"location":"supabase/#api-key-api_key","title":"API Key (API_KEY)","text":"<p>Your Supabase API Key is a public value that must be sent with every API request. The key is visible in Supabase Studio at <code>Settings &gt; API &gt; Project API keys</code></p> <p></p>"},{"location":"usage_with_apollo/","title":"Usage with Apollo","text":"<p>This guide will show you how to use pg_graphql with Apollo and GraphQL Code Generator for type-safe GraphQL queries in your React application.</p>"},{"location":"usage_with_apollo/#apollo-setup","title":"Apollo Setup","text":""},{"location":"usage_with_apollo/#pre-requisites","title":"Pre-requisites","text":"<ol> <li>Follow the Apollo Getting Started Guide.</li> <li>Follow the GraphQL Code Generator Installation Guide.</li> </ol>"},{"location":"usage_with_apollo/#configuring-graphql-code-generator","title":"Configuring GraphQL Code Generator","text":"<p>Modify your <code>codegen.ts</code> file to reflect the following:</p> <pre><code>import type { CodegenConfig } from '@graphql-codegen/cli'\nimport { addTypenameSelectionDocumentTransform } from '@graphql-codegen/client-preset'\n\nconst config: CodegenConfig = {\nschema: 'http://localhost:54321/graphql/v1', // Using the local endpoint, update if needed\ndocuments: 'src/**/*.tsx',\noverwrite: true,\nignoreNoDocuments: true,\ngenerates: {\n'src/gql/': {\npreset: 'client',\ndocumentTransforms: [addTypenameSelectionDocumentTransform],\nplugins: [],\nconfig: {\nscalars: {\nUUID: 'string',\nDate: 'string',\nTime: 'string',\nDatetime: 'string',\nJSON: 'string',\nBigInt: 'string',\nBigFloat: 'string',\nOpaque: 'any',\n},\n},\n},\n},\nhooks: {\nafterAllFileWrite: ['npm run prettier'], // optional\n},\n}\n\nexport default config\n</code></pre>"},{"location":"usage_with_apollo/#configuring-apollo-client","title":"Configuring Apollo Client","text":"<p>This example uses Supabase for the GraphQL server, but pg_graphql can be used independently.</p> <pre><code>import {\nApolloClient,\nInMemoryCache,\ncreateHttpLink,\ndefaultDataIdFromObject\n} from '@apollo/client'\nimport { setContext } from '@apollo/client/link/context'\nimport { relayStylePagination } from '@apollo/client/utilities'\nimport supabase from './supabase'\n\nconst cache = new InMemoryCache({\ndataIdFromObject(responseObject) {\nif ('nodeId' in responseObject) {\nreturn `${responseObject.nodeId}`\n}\n\nreturn defaultDataIdFromObject(responseObject)\n},\npossibleTypes: { Node: ['Todos'] } // optional, but useful to specify supertype-subtype relationships\ntypePolicies: {\nQuery: {\nfields: {\ntodosCollection: relayStylePagination(), // example of paginating a collection\nnode: {\nread(_, { args, toReference }) {\nconst ref = toReference({\nnodeId: args?.nodeId,\n})\n\nreturn ref\n},\n},\n},\n},\n},\n})\n\nconst httpLink = createHttpLink({\nuri: 'http://localhost:54321/graphql/v1',\n})\n\nconst authLink = setContext(async (_, { headers }) =&gt; {\nconst token = (await supabase.auth.getSession()).data.session?.access_token\n\nreturn {\nheaders: {\n...headers,\nAuthorization: token ? `Bearer ${token}` : '',\n},\n}\n})\n\nconst apolloClient = new ApolloClient({\nlink: authLink.concat(httpLink),\ncache,\n})\n\nexport default apolloClient\n</code></pre> <ul> <li><code>typePolicies.Query.fields.node</code> is also optional, but useful for reducing cache misses. Learn more about Redirecting to cached data.</li> </ul>"},{"location":"usage_with_apollo/#example-query","title":"Example Query","text":"<pre><code>import { useQuery } from '@apollo/client'\nimport { graphql } from './gql'\n\nconst allTodosQueryDocument = graphql(/* GraphQL */ `\n  query AllTodos($cursor: Cursor) {\n    todosCollection(first: 10, after: $cursor) {\n      edges {\n        node {\n          nodeId\n          title\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`)\n\nconst TodoList = () =&gt; {\nconst { data, fetchMore } = useQuery(allTodosQueryDocument)\n\nreturn (\n&lt;&gt;\n{data?.thingsCollection?.edges.map(({ node }) =&gt; (\n&lt;Todo key={node.nodeId} title={node.title} /&gt;\n))}\n{data?.thingsCollection?.pageInfo.hasNextPage &amp;&amp; (\n&lt;Button\nonClick={() =&gt; {\nfetchMore({\nvariables: {\ncursor: data?.thingsCollection?.pageInfo.endCursor,\n},\n})\n}}\n&gt;\nLoad More\n&lt;/Button&gt;\n)}\n&lt;/&gt;\n)\n}\n\nexport default TodoList\n</code></pre>"},{"location":"usage_with_relay/","title":"Usage with Relay","text":"<p>pg_graphql implements the GraphQL Global Object Identification Specification (<code>Node</code> interface) and the GraphQL Cursor Connections Specification to be compatible with Relay.</p>"},{"location":"usage_with_relay/#relay-setup","title":"Relay Setup","text":""},{"location":"usage_with_relay/#pre-requisites","title":"Pre-requisites","text":"<p>Follow the Relay Installation Guide.</p>"},{"location":"usage_with_relay/#configuring-the-relay-compiler","title":"Configuring the Relay Compiler","text":"<p>Modify your <code>relay.config.js</code> file to reflect the following:</p> <pre><code>module.exports = {\n// standard relay config options\nsrc: './src',\nlanguage: 'typescript',\nschema: './data/schema.graphql',\nexclude: ['**/node_modules/**', '**/__mocks__/**', '**/__generated__/**'],\n// pg_graphql specific options\nschemaConfig: {\nnodeInterfaceIdField: 'nodeId',\nnodeInterfaceIdVariableName: 'nodeId',\n},\ncustomScalars: {\nUUID: 'string',\nDatetime: 'string',\nJSON: 'string',\nBigInt: 'string',\nBigFloat: 'string',\nOpaque: 'any',\n},\n}\n</code></pre> <ul> <li><code>schemaConfig</code> tells the Relay compiler where to find the <code>nodeId</code> field on the <code>node</code> interface</li> <li><code>customScalars</code> will improve Relay's type emission</li> </ul>"},{"location":"usage_with_relay/#configuring-your-relay-environment","title":"Configuring your Relay Environment","text":"<p>This example uses Supabase for the GraphQL server, but pg_graphql can be used independently.</p> <pre><code>import {\nEnvironment,\nFetchFunction,\nNetwork,\nRecordSource,\nStore,\n} from 'relay-runtime'\n\nimport supabase, { SUPABASE_ANON_KEY, SUPABASE_URL } from './supabase'\n\nconst fetchQuery: FetchFunction = async (operation, variables) =&gt; {\nconst {\ndata: { session },\n} = await supabase.auth.getSession()\n\nconst response = await fetch(`${SUPABASE_URL}/graphql/v1`, {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json',\napikey: SUPABASE_ANON_KEY,\nAuthorization: `Bearer ${session?.access_token ?? SUPABASE_ANON_KEY}`,\n},\nbody: JSON.stringify({\nquery: operation.text,\nvariables,\n}),\n})\n\nreturn await response.json()\n}\n\nconst network = Network.create(fetchQuery)\nconst store = new Store(new RecordSource())\n\nconst environment = new Environment({\nnetwork,\nstore,\ngetDataID: (node) =&gt; node.nodeId,\nmissingFieldHandlers: [\n{\nhandle(field, _record, argValues) {\nif (field.name === 'node' &amp;&amp; 'nodeId' in argValues) {\n// If field is node(nodeId: $nodeId), look up the record by the value of $nodeId\nreturn argValues.nodeId\n}\n\nreturn undefined\n},\nkind: 'linked',\n},\n],\n})\n\nexport default environment\n</code></pre> <ul> <li><code>getDataID</code> is the most important option to add, as it tells Relay how to store data correctly in the cache.</li> <li><code>missingFieldHandlers</code> is optional in this example but helps with Rendering Partially Cached Data.</li> </ul>"},{"location":"usage_with_relay/#pagination","title":"Pagination","text":"<p>Say you are working on a Todo app and want to add pagination. You can use <code>@connection</code> and <code>@prependNode</code> to do this.</p> <p>Fragment passed to <code>usePaginationFragment()</code></p> <pre><code>fragment TodoList_query on Query\n@argumentDefinitions(\ncursor: { type: \"Cursor\" }\ncount: { type: \"Int\", defaultValue: 20 }\n)\n@refetchable(queryName: \"TodoListPaginationQuery\") {\ntodosCollection(after: $cursor, first: $count)\n@connection(key: \"TodoList_query_todosCollection\") {\npageInfo {\nhasNextPage\nendCursor\n}\nedges {\ncursor\nnode {\nnodeId\n...TodoItem_todos\n}\n}\n}\n}\n</code></pre> <p>Mutation to create a new Todo</p> <pre><code>mutation TodoCreateMutation($input: TodosInsertInput!, $connections: [ID!]!) {\ninsertIntoTodosCollection(objects: [$input]) {\naffectedCount\nrecords @prependNode(connections: $connections, edgeTypeName: \"TodosEdge\") {\n...TodoItem_todos\n}\n}\n}\n</code></pre> <p>Code to call the mutation</p> <pre><code>import { ConnectionHandler, graphql, useMutation } from 'react-relay'\n\n// inside a React component\nconst [todoCreateMutate, isMutationInFlight] =\nuseMutation&lt;TodoCreateMutation&gt;(CreateTodoMutation)\n\n// inside your create todo function\nconst connectionID = ConnectionHandler.getConnectionID(\n'root',\n'TodoList_query_todosCollection'\n)\n\ntodoCreateMutate({\nvariables: {\ninput: {\n// ...new todo data\n},\nconnections: [connectionID],\n},\n})\n</code></pre>"},{"location":"views/","title":"Views","text":"<p>Views, materialized views, and foreign tables can be exposed with pg_graphql.</p>"},{"location":"views/#primary-keys-required","title":"Primary Keys (Required)","text":"<p>A primary key is required for an entity to be reflected in the GraphQL schema. Tables can define primary keys with SQL DDL, but primary keys are not available for views, materialized views, or foreign tables. For those entities, you can set a \"fake\" primary key with a comment directive. <pre><code>{\"primary_key_columns\": [&lt;column_name_1&gt;, ..., &lt;column_name_n&gt;]}\n</code></pre></p> <p>For example:</p> <p><pre><code>create view \"Person\" as\nselect\nid,\nname\nfrom\n\"Account\";\n\ncomment on view \"Person\" is e'@graphql({\"primary_key_columns\": [\"id\"]})';\n</code></pre> tells pg_graphql to treat <code>\"Person\".id</code> as the primary key for the <code>Person</code> entity resulting in the following GraphQL type:</p> <pre><code>type Person {\nnodeId: ID!\nid: Int!\nname: String!\n}\n</code></pre> <p>Warning</p> <p>Values of the primary key column/s must be unique within the table. If they are not unique, you will experience inconsistent behavior with <code>ID!</code> types, sorting, and pagination.</p> <p>Updatable views are reflected in the <code>Query</code> and <code>Mutation</code> types identically to tables. Non-updatable views are read-only and accessible via the <code>Query</code> type only.</p>"},{"location":"views/#relationships","title":"Relationships","text":"<p>pg_graphql identifies relationships among entities by inspecting foreign keys. Views, materialized views, and foreign tables do not support foreign keys. For this reason, relationships can also be defined in comment directive using the structure:</p> <pre><code>{\n\"foreign_keys\": [\n{\n\"local_name\": \"foo\", // optional\n\"local_columns\": [\"account_id\"],\n\"foreign_name\": \"bar\", // optional\n\"foreign_schema\": \"public\",\n\"foreign_table\": \"account\",\n\"foreign_columns\": [\"id\"]\n}\n]\n}\n</code></pre> <p>For example:</p> <p><pre><code>create table \"Account\"(\nid serial primary key,\nname text not null\n);\n\ncreate table \"EmailAddress\"(\nid serial primary key,\n\"accountId\" int not null, -- note: no foreign key\n\"isPrimary\" bool not null,\naddress text not null\n);\n\ncomment on table \"EmailAddress\" is e'\n    @graphql({\n        \"foreign_keys\": [\n          {\n            \"local_name\": \"addresses\",\n            \"local_columns\": [\"accountId\"],\n            \"foreign_name\": \"account\",\n            \"foreign_schema\": \"public\",\n            \"foreign_table\": \"Account\",\n            \"foreign_columns\": [\"id\"]\n          }\n        ]\n    })';\n</code></pre> defines a relationship equivalent to the following foreign key <pre><code>alter table \"EmailAddress\"\nadd constraint fkey_email_address_to_account\nforeign key (\"accountId\")\nreferences \"Account\" (\"id\");\n\ncomment on constraint fkey_email_address_to_account\non \"EmailAddress\"\nis E'@graphql({\"foreign_name\": \"account\", \"local_name\": \"addresses\"})';\n</code></pre></p> <p>yielding the GraphQL types:</p> <pre><code>type Account {\nnodeId: ID!\nid: Int!\nname: String!\naddresses(\nafter: Cursor,\nbefore: Cursor,\nfilter: EmailAddressFilter,\nfirst: Int,\nlast: Int,\norderBy: [EmailAddressOrderBy!]\n): EmailAddressConnection\n}\n\ntype EmailAddress {\nnodeId: ID!\nid: Int!\nisPrimary: Boolean!\naddress: String!\naccountId: Int!\naccount: Account!\n}\n</code></pre>"}]}