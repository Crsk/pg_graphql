begin;
    -- These following tests are there to just document
    -- the current behaviour and any limitations. Do not
    -- assume that just because they pass it is the expected
    -- behaviour.
    create table account(
        id serial primary key,
        email varchar(255) not null
    );
    insert into public.account(email)
    values
        ('aardvark@x.com'),
        ('bat@x.com'),
        ('cat@x.com');
    -- functions returning record are not supported yet
    -- currently they do return the fields from the returned record
    -- but do not return nodeId and __typename fields
    -- Their schema queries also return a type of scalar
    create function returns_record()
        returns record language sql stable
    as $$ select id, email from account; $$;
    select jsonb_pretty(graphql.resolve($$
        query {
            returnsRecord {
                id
                email
                nodeId
                __typename
            }
        }
    $$));
             jsonb_pretty              
---------------------------------------
 {                                    +
     "data": {                        +
         "returnsRecord": {           +
             "id": 1,                 +
             "email": "aardvark@x.com"+
         }                            +
     }                                +
 }
(1 row)

    -- overloaded functions are also not supported yet
    -- some of the simpler cases can work, but not
    -- everything works.
    create function an_overloaded_function()
        returns int language sql stable
    as $$ select 1; $$;
    create function an_overloaded_function(a int)
        returns int language sql stable
    as $$ select 2; $$;
    create function an_overloaded_function(a text)
        returns int language sql stable
    as $$ select 2; $$;
    select jsonb_pretty(graphql.resolve($$
        query {
            anOverloadedFunction
        }
    $$));
           jsonb_pretty            
-----------------------------------
 {                                +
     "data": {                    +
         "anOverloadedFunction": 1+
     }                            +
 }
(1 row)

    select jsonb_pretty(graphql.resolve($$
        query {
            anOverloadedFunction (a: 1)
        }
    $$));
                         jsonb_pretty                         
--------------------------------------------------------------
 {                                                           +
     "data": null,                                           +
     "errors": [                                             +
         {                                                   +
             "message": "Invalid input for String(None) type"+
         }                                                   +
     ]                                                       +
 }
(1 row)

    select jsonb_pretty(graphql.resolve($$
        query {
            anOverloadedFunction (a: "some text")
        }
    $$));
           jsonb_pretty            
-----------------------------------
 {                                +
     "data": {                    +
         "anOverloadedFunction": 2+
     }                            +
 }
(1 row)

    -- functions without arg names are not supported yet
    -- we will need to generate synthetic names like arg1, arg2 etc.
    -- for these to be supported
    create function no_arg_name(int)
        returns int language sql immutable
    as $$ select 42; $$;
    select jsonb_pretty(graphql.resolve($$
        query {
            noArgName
        }
    $$));
                             jsonb_pretty                              
-----------------------------------------------------------------------
 {                                                                    +
     "data": null,                                                    +
     "errors": [                                                      +
         {                                                            +
             "message": "function public.no_arg_name() does not exist"+
         }                                                            +
     ]                                                                +
 }
(1 row)

    select jsonb_pretty(graphql.resolve($$
        query {
            noArgName(arg0: 1)
        }
    $$));
                         jsonb_pretty                          
---------------------------------------------------------------
 {                                                            +
     "data": null,                                            +
     "errors": [                                              +
         {                                                    +
             "message": "Input contains extra keys [\"arg0\"]"+
         }                                                    +
     ]                                                        +
 }
(1 row)

    select graphql.resolve($$
        mutation {
            insertIntoAccountCollection(objects: [
                { email: "foo@barsley.com" },
                { email: "bar@foosworth.com" }
            ]) {
                affectedCount
                records {
                    id
                }
            }
        }
    $$);
                                              resolve                                               
----------------------------------------------------------------------------------------------------
 {"data": {"insertIntoAccountCollection": {"records": [{"id": 4}, {"id": 5}], "affectedCount": 2}}}
(1 row)

    -- variadic functions are not supported
    create function variadic_func(variadic int[])
        returns int language sql immutable
    as $$ select 42; $$;
    select jsonb_pretty(graphql.resolve($$
        query {
            variadicFunc
        }
    $$));
                             jsonb_pretty                              
-----------------------------------------------------------------------
 {                                                                    +
     "data": null,                                                    +
     "errors": [                                                      +
         {                                                            +
             "message": "Unknown field \"variadicFunc\" on type Query"+
         }                                                            +
     ]                                                                +
 }
(1 row)

    -- functions returning void are not supported
    create function void_returning_func(variadic int[])
        returns void language sql immutable
    as $$ $$;
    select jsonb_pretty(graphql.resolve($$
        query {
            voidReturningFunc
        }
    $$));
                                jsonb_pretty                                
----------------------------------------------------------------------------
 {                                                                         +
     "data": null,                                                         +
     "errors": [                                                           +
         {                                                                 +
             "message": "Unknown field \"voidReturningFunc\" on type Query"+
         }                                                                 +
     ]                                                                     +
 }
(1 row)

rollback;
