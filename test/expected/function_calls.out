begin;
    -- Only volatilve functions appear on the mutation object
    create function add_smallints(a smallint, b smallint)
        returns smallint language sql volatile
    as $$ select a + b; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            addSmallints(a: 1, b: 2)
        }
    $$));
       jsonb_pretty        
---------------------------
 {                        +
     "data": {            +
         "addSmallints": 3+
     }                    +
 }
(1 row)

    create function add_ints(a int, b int)
        returns int language sql volatile
    as $$ select a + b; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            addInts(a: 2, b: 3)
        }
    $$));
     jsonb_pretty     
----------------------
 {                   +
     "data": {       +
         "addInts": 5+
     }               +
 }
(1 row)

    create function add_bigints(a bigint, b bigint)
        returns bigint language sql volatile
    as $$ select a + b; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            addBigints(a: 3, b: 4)
        }
    $$));
      jsonb_pretty       
-------------------------
 {                      +
     "data": {          +
         "addBigints": 7+
     }                  +
 }
(1 row)

    create function add_reals(a real, b real)
        returns real language sql volatile
    as $$ select a + b; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            addReals(a: 4.5, b: 5.6)
        }
    $$));
       jsonb_pretty       
--------------------------
 {                       +
     "data": {           +
         "addReals": 10.1+
     }                   +
 }
(1 row)

    create function add_doubles(a double precision, b double precision)
        returns double precision language sql volatile
    as $$ select a + b; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            addDoubles(a: 7.8, b: 9.1)
        }
    $$));
        jsonb_pretty        
----------------------------
 {                         +
     "data": {             +
         "addDoubles": 16.9+
     }                     +
 }
(1 row)

    create function add_numerics(a numeric, b numeric)
        returns numeric language sql volatile
    as $$ select a + b; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            addNumerics(a: "11.12", b: "13.14")
        }
    $$));
         jsonb_pretty         
------------------------------
 {                           +
     "data": {               +
         "addNumerics": 24.26+
     }                       +
 }
(1 row)

    create function and_bools(a bool, b bool)
        returns bool language sql volatile
    as $$ select a and b; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            andBools(a: true, b: false)
        }
    $$));
       jsonb_pretty        
---------------------------
 {                        +
     "data": {            +
         "andBools": false+
     }                    +
 }
(1 row)

    create function uuid_identity(input uuid)
        returns uuid language sql volatile
    as $$ select input; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            uuidIdentity(input: "d3ef3a8c-2c72-11ee-b094-776acede7221")
        }
    $$));
                          jsonb_pretty                          
----------------------------------------------------------------
 {                                                             +
     "data": {                                                 +
         "uuidIdentity": "d3ef3a8c-2c72-11ee-b094-776acede7221"+
     }                                                         +
 }
(1 row)

    create function concat_text(a text, b text)
        returns text language sql volatile
    as $$ select a || b; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            concatText(a: "Hello ", b: "World")
        }
    $$));
            jsonb_pretty             
-------------------------------------
 {                                  +
     "data": {                      +
         "concatText": "Hello World"+
     }                              +
 }
(1 row)

    create function next_day(d date)
        returns date language sql volatile
    as $$ select d + interval '1 day'; $$;
    select jsonb_pretty(graphql.resolve($$
        mutation {
            nextDay(d: "2023-07-28")
        }
    $$));
          jsonb_pretty           
---------------------------------
 {                              +
     "data": {                  +
         "nextDay": "2023-07-29"+
     }                          +
 }
(1 row)

rollback;
